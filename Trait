Before reading this section you should understand all of the following:

* abstract class
* abstract method
* abstract member
* concrete method
* concrete member

To review these topics, read the following web page:
https://github.com/w9mwi/Scala_3/blob/main/Abstract_Classes_And_Methods

In Scala, a trait and an abstract class are very similar.  Here is a list
of their similarities and differences:

* In Scala, traits and abstract classes are the only structures that can
  contain abstract methods and abstract members.  In fact, the purpose of
  traits and abstract classes is to contain abstract methods/members.

* traits and abstract classes can also contain concrete methods and
  concrete members.  Although it's possible to write a trait or an
  abstract class that contains only concrete methods/members, it
  would never make sense to do that.

* Based on the above information, every trait and abstract class
  should contain at least one abstract method/member.  Once that
  requirement is met, it's OK for the trait or abstract class to
  also contain concrete methods/members.

* It's not possible to instantiate a trait or an abstract class.  Therefore,
  every trait and abstract class must be used as a "base class".  In other
  words, traits and abstract classes can only be used when they're inherited
  by a regular class.

* A regular Scala class can extend (inherit from) only one class, but can
  inherit from any number of traits.

* In Scala 2, the "with" keyword must be used (instead of the "extends" keyword)
  to inherit from traits.  In Scala 3, you can still use the "with" keyword
  to inherit from traits, but you should use the "extends" keyword instead.
  As Scala 3 allows you to inherit from any class or trait using only the
  "extends" keyword.

* In Scala 2, a trait couldn't accept arguments (as an abstract class can).
  In Scala 3, a trait can accept arguments.  This makes it possible for
  Scala 3 programs to nearly eliminate the implementation of abstract classes,
  with the exception for interoperability with Java code, and possibly some
  other rare scenarios.  In most cases, Scala 3 programs should implement
  only traits, and elminate the implementation of abstract classes.

QUESTION:
When should a Scala trait be implemented?

ANSWER:
When BOTH of the following 2 conditions are true...

1) You have multiple different class types (i.e., class A, class B, etc.);
   where ALL those class types must invoke...

   * A method having an identical name AND identical argument signature.
     ...AND/OR...
   * A member having an identical name.

2) A method/member must be coded differently, dependent on which
   class (class A, class B, etc.) invokes it.

Methods/Members that must be coded differently (dependent on which
class type invokes the method/member) must be coded as abstract
methods/members in the trait.  Those same methods/members must also
be coded as concrete methods/members inside the classes (class A,
class B, etc.) that inhert from the trait.  Doing this will force
each class type to invoke different code for methods/members that
have identical names.

IMPORTANT: Code that works with ALL of these class types (class A,
           class B, etc.) must be also be added to the trait, but
           as concrete (not abstract) methods/members.  Therefore,
           concrete methods/members contained in the trait won't
           exist in the class types that inherit from the trait.

View the following web page to see a Scala 3 program that implements traits.
https://github.com/w9mwi/Scala_3/blob/main/Abstract_Classes_And_Methods
