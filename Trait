Before reading this section you should understand all of the following:

* abstract class
* abstract method
* abstract member
* concrete method
* concrete member

If you need to review these topics, read the following web page:

https://github.com/w9mwi/Scala_3/blob/main/Abstract_Classes_And_Methods

In Scala, a trait and an abstract class are very similar.  Here is a list
of their similarities and differences:

* In Scala, traits and abstract classes are the only structures that can
  contain abstract methods and abstract members.  In fact, the purpose of
  traits and abstract classes is to contain abstract methods/members.

* traits and abstract classes can also contain concrete methods and
  concrete members.  Although it's possible to write a trait or an
  abstract class that contains only concrete methods/members, it wouldn't
  make sense to do that.  If all methods/members are concrete, they
  should reside in a regular class.

* Based on the above information, every trait and abstract class
  should contain at least one abstract method/member.

* It's not possible to instantiate a trait or an abstract class.  Therefore,
  every trait and abstract class must be used as a "base class".  In other
  words, traits and abstract classes can only be inherited by regular classes.

* A regular Scala class can extend (inherit from) only one class, but can
  inherit from any number of traits.

* In Scala 2, the "with" keyword must be used (instead of the "extends" keyword)
  to inherit from traits.  In Scala 3, you can still use the "with" keyword
  to inherit from traits, but you should use the "extends" keyword instead.
  As Scala 3 allows you to inherit from any class or trait using only the
  "extends" keyword.

* In Scala 2, a trait couldn't accept arguments, as an abstract class can.
  In Scala 3, a trait can accept arguments.  This makes it possible for
  Scala 3 programs to eliminate the implementation of abstract classes.
  Therefore, Scala 3 programs should implement only traits, and elminate
  the implemntation abstract classes.

QUESTION:
When should a Scala trait be implemented?

ANSWER:
When BOTH of the following 2 conditions are true...

1) You have multiple different class types (i.e., class A, class B, etc.);
   where all these classes have...

   * one or more methods having identical names AND identical argument signatures.
     ...AND/OR...
   * one or more members having identical names.

2) At least one of these methods/members must be coded differently,
   dependent on which class (class A, class B, etc.) invokes it.

   


         
A Scala trait should be used only when 


View the following web page to see a Scala 3 program that implements traits.

https://github.com/w9mwi/Scala_3/blob/main/Abstract_Classes_And_Methods
