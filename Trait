Scala provides 3 constructs for creating user-defined types:

1) class
2) object
3) trait

Use a Scala class (or a Scala object) to represent a thing/object, such
as Person, Animal, etc.  A Scala trait is used to represent a behavior.
Examples of behavior are commute-to-school, order-a-pizza, etc.  A Scala
trait is used to contain identically-named methods/members that apply to
different (but similar) class types (i.e., Person, Animal, etc).  Those
class types will then inherit from (extend) the trait, and thus implement
all methods/members contained in the trait.

Before reading this section you should understand all of the following:

* abstract class
* abstract method
* abstract member
* concrete method
* concrete member

To review these topics, read the following web page:
https://github.com/w9mwi/Scala_3/blob/main/Abstract_Classes_And_Methods

In Scala, a trait and an abstract class are very similar.  Here is a list
of their similarities and differences:

* In Scala, traits and abstract classes are the only structures that can
  contain abstract methods and abstract members.  In fact, the purpose of
  traits and abstract classes is to contain abstract methods/members.

* traits and abstract classes can also contain concrete methods and
  concrete members.  Although it's possible to write a trait or an
  abstract class that contains only concrete methods/members, it
  wouldn't make sense to do that; you would use a class instead.

* It's not possible to instantiate a trait or an abstract class.  Therefore,
  every trait and abstract class must be used as a "base class".  In other
  words, traits and abstract classes can only be used when they're inherited
  by a regular class.

* Based on the above information, every trait and abstract class
  must contain at least one abstract method/member.  Once that
  requirement is met, the trait or the abstract class can also
  contain concrete methods/members.

  The following code snippet demonstrates how to write an abstract class
  and a trait that are equivalent to one another; that is, either one
  could be used to replace the other.  In both the abstract class and
  the trait below we demonstrate how to:

     * declare an abstract method (a method that's not defined)
     * declare an abstract member (a val that's not initialized)
     * declare a concrete method (a method that is defined)
     * declare a concrete member (a val that is initialized)

     abstract class Animal:
       def ageInYears:Int                                  // ageInYears is an abstract method.
       def printWeight:Unit = println(s"weight = $weight") // printWeight is a concrete method.
       val bodyTemp:Int                                    // bodyTemp is an abstract member.
       val weight:Int = 234                                // weight is a concrete member.

     trait Animal:
       def ageInYears:Int                                  // ageInYears is an abstract method.
       def printWeight:Unit = println(s"weight = $weight") // printWeight is a concrete method.
       val bodyTemp:Int                                    // bodyTemp is an abstract member.
       val weight:Int = 234                                // weight is a concrete member.

  IMPORTANT: A trait can also declare the following 2 items as abstract, but aren't
             demonstrated here.
             
             1) abstract type members (type T), potentially with bounds (type T <: S)
             2) abstract givens (given t: T) in Scala 3 only

* The word "mixin" is often associated with Scala traits.  A Scala class can extend
  (inherit from) only one class, but it can extend multiple traits.  When a class
  extends multiple traits, it's "mixing in" different traits; thus, the name "mixin."

* In Scala 2, the "with" keyword must be used (instead of the "extends" keyword)
  to inherit from traits.  In Scala 3, you can still use the "with" keyword
  to inherit from traits, but you should use the "extends" keyword instead.
  As Scala 3 allows you to inherit from any class or trait using only the
  "extends" keyword.

* In Scala 2, a trait couldn't accept arguments, as an abstract class can.
  In Scala 3, a trait can accept arguments.  This makes it possible for
  Scala 3 programs to nearly eliminate the implementation of abstract classes,
  with the exception for interoperability with Java code, and possibly some
  other rare scenarios.  In most cases, Scala 3 programs should implement
  only traits, and elminate the implementation of abstract classes.

QUESTION:
When should a Scala trait be implemented?

ANSWER:
When BOTH of the following 2 conditions are true...

1) You have different class types (i.e., class A, class B, etc.),
   where each of those class types must invoke...

   * A method having an identical name AND identical argument signature.
     ...AND/OR...
   * A member having an identical name.

2) The method/member must be coded differently, dependent on which
   class (class A, class B, etc.) invokes it.

Methods/Members that must be coded differently among the class types
inheriting from the trait must be coded as abstract methods/members
in the trait.  And then, each of those methods/members must be
defined/initialized in the class inheriting from the trait.  That
will force each class type inheriting from the trait to always
execute the appropriate code.

IMPORTANT: Code that works with ALL of these class types (class A,
           class B, etc.) must be also be added to the trait, but
           as concrete (not abstract) methods/members.  Therefore,
           concrete methods/members contained in the trait won't
           exist in the class types that inherit from the trait.

QUESTION:
What happens when a class inherits from two traits that implement an
identically-named method/member differently?  And how about if that
identically-named method also exists in the class itself?

ANSWER:
Scala solves this problem via a mechanism called linearization.
In the following snippet of Scala 3 code, assume that Trait_1 and
Trait_2 both implement a concrete method named run().

class Animal extends Trait_1, Trait_2:
  ...  // Animal class defined here.

val rabbit = Animal
rabbit.run()

Which run() method does the above line of code execute?  Scala searches
for the run() method in the order shown below.  When the first run() method
is found, Scala executes it, and stops the search.  This search process
prevents "The Diamond Problem" of multiple inheritance from occurring.
That is, when a Scala class implements what appears to be multiple
inheritance, Scala resolves the problem by inheriting the duplicate-named
method from only one of the classes/traits.

1) Start with the class that invokes the run() method, which is Animal.
2) If there is no run() method in Animal, search the traits from right
   to left...  Search Trait_2 first, then search Trait_1.

This one example will cover most real-world scenarios.  However, it's
possible for this search to get far more complex.  For example, a class
that extends a class, and extends multiple traits, and invokes a parent
class via the call to super(), and its parent class extends a class that
extends multiple traits.  Etc.  Etc.  Search the Internet if you need
to know all rules that apply to this linearization process.

View the following web page to see a Scala 3 program that implements traits.
https://github.com/w9mwi/Scala_3/blob/main/Abstract_Classes_And_Methods
