In Scala 3 you can add new methods to any Scala class that has already been
defined.  This includes not just Scala classes that you have written, but
any Scala class that your code can invoke; including classes defined by
the Scala 3 language.

The following program shows...

1) How to add a method to a class after you have written that class.
2) How to add a method to the String class defined in Scala 3.

==============================================================================

@main def main() =
  // ************************************************************************
  // ************************************************************************
  // Circle is defined here by the programmer as a "case class",
  // but it contains no methods.
  case class Circle(xCoordinate: Double, yCoordinate: Double, radius: Double)

  // After you have defined a class, you can add a new method to that class
  // by using the Scala 3 "extension" word.  In this example a method named
  // circumference() gets added to the Circle class that was defined above.
  extension (c: Circle)
    def circumference: Double = c.radius * math.Pi * 2

  // Here we instantiate a Circle class, then invoke its circumference() method.
  val myCircle = Circle(12.34, -98.76, 10.0)
  println(s"Circumference = ${myCircle.circumference}") // PRINTS:  Circumference = 62.83185307179586


  // ************************************************************************
  // ************************************************************************
  // The following code adds a method named makeInt() to the Scala 3
  // String class.  NOTE: The Integer.parseInt() method called below
  // is defined in the Java API.
  extension (s: String)
    def makeInt(radix: Int): Int = Integer.parseInt(s, radix)

  // Below we convert 3 Strings representing base 2 (binary) integers
  // to Scala Int values, which are always base 10 (decimal) integers.
  // For simplicity, there's no error checking performed on these
  // String to Integer conversions.
  var result = "1".makeInt(2)
  println(s"1 binary = $result decimal") // PRINTS:  1 binary = 1 decimal

  result = "10".makeInt(2)
  println(s"10 binary = $result decimal") // PRINTS:  10 binary = 2 decimal

  result = "100".makeInt(2)
  println(s"100 binary = $result decimal") // PRINTS:  100 binary = 4 decimal

==============================================================================

When you want to add a method to some class that you can access, but can't change,
you can do so like in the example below.

// Assume you can access this Circle case class, but can't changes its source code.
case class Circle(x: Double, y: Double, radius: Double)

// If you add the following code to your source code, you'll be able to
// invoke the 3 methods defined below (circumference, diameter, and area)
// on any Circle class that you instantiate.
extension (c: Circle)
  def circumference: Double = c.radius * math.Pi * 2
  def diameter: Double = c.radius * 2
  def area: Double = math.Pi * c.radius * c.radius
