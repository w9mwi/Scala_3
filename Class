This web page covers the Scala class, where "class" is a keyword.
A Scala class is the most common and fundamental data structure
in the Scala language.  All of the following topics are related
to the Scala class and have a dedicated section below.

* Class
* Base Class
* Default Arguments and Named Arguments
* Auxiliary Class Constructors
* Case Class
* Sealed Class
* Open Class (Scala 3 only)


CLASS
=====
A Scala class or "case class" always requires a parenthesis pair () in its
constructor, even when the class constructor accepts no arguments.

A Scala 3 class or "case class" can be written with or without a braces
pair {}.  If a Scala 3 class doesn't implement a braces pair {}, it must
instead implement a colon char (:) at the termination of its argument list,
with this exception...  A Scala class or "case class" that contains no body
of executable code implements neither a braces pair {}, or a colon char (:).

All of the code that follows the colon char (:) in a class or "case class"
must appear on a new line below its argument list, and must be indented to
the right of the opening "class" or "case class" keywords.

When a class or "case class" has an argument list, it's optional to precede
each argument with the "val" keyword, or the "var" keyword, or neither.

When a class argument is preceded with the "val" or "var" keyword, the
argument becomes a public class member by default; so it can be accessed
inside and outside the class.

When a class argument doesn't use the "val" or "var" keyword, the argument
becomes a private "val" by default, so it can be accessed only from within
the class, and its value can never be changed.

IMPORTANT: A class can be written to contain val/var members that aren't
           included in the class's argument list.  So don't assume that
           a class's argument list references all of its val/var members.

If a class contains no val/var members, or if all instantiations of that class
will always have identical val/var values, then a Scala object should be used
instead of a Scala class.

A regular class isn't Serializable by default, while a "case class" is Serializable
by default.  If you want to make a regular class Serializable, you need to add the
text "extends Serializable" to the class definition.

For every regular class and "case class" that you write, Scala automatically
generates the following 4 methods.

apply()   -  This method gets generated and invoked automatically whenever a Scala class
             (or "case class") is instantiated.  (This method is rarely called directly
             by the programer.)  In Scala 3 you don't need to use the "new" keyword when
             instantiating a regular class, or a "case class".  You can replace a regular
             class's default apply() method by adding your own apply() method to the
             body of the regular class.  But a "case class" always implements its own
             apply() method.

equals()   - Determines if two Scala objects are equal.  Read the hashCode() description below.

hashCode() - Returns an Int value.  If calling hashCode() on two Scala objects return the
             same Int value, they are equal.  You can use the equals() method or the
             '==' operator in place of calling hashCode() to determine equivalency.

toString() - Renders the case classâ€™s name and fields to a String.  You may want
             to define your own toString() method for a class (using the 'override'
             keyword) so it prints information about the class that you desire.

When a Scala "case class" is written, Scala automaticaly generates the copy() and
unapply() methods.  (For details, see the "CASE CLASS" section below.)

The following program demonstrates the above-mentioned rules.

class Bozo()                  // A class doesn't require any arguments.
class Book(var title:String)  // Book.title is a public var class member.
class Person(val name:String) // Person.name is a public val class member.
class Movie(name:String):     // Movie.name is a private val class member.
  def printName:Unit = println(name)  // printName is method in the Movie class.

/******************
 * main()
 *****************/
@main def main():Unit =
  val bozo = Bozo()
  println(s"bozo = $bozo") // PRINTS: bozo = Bozo@357246de

  val book = Book("Scala 3 for Idiots")
  // Because the Book.title argument has been declared a var, it's a public member,
  // so it can accessed here, outside the Person class.
  println(s"book.title = ${book.title}") // PRINTS: book.title = Scala 3 for Idiots
  // Because the Book.title argument has been declared a var, we can change also
  // change it's value, as shown here...
  book.title = "Scala 3 for Geniuses"
  println(s"book.title = ${book.title}") // PRINTS: book.title = Scala 3 for Geniuses

  val person = Person("Tom")
  // Because the Person.name argument has been declared a val, it's a public member,
  // so it can be accessed here, outside the Person class.
  println(s"person.name = ${person.name}") // PRINTS: person.name = Tom

  val movie = Movie("When Galaxies Collide")
  // Because the Movie.name argument isn't preceded with the "val" or
  // "var" keyword, it becomes a private class member by default.  So
  // Movie.name can be accessed only from within the Movie class.
  print("movie.name = "); movie.printName // PRINTS: movie.name = When Galaxies Collide

============================================================================

BASE CLASS
==========
There is no Scala keyword "base" that's used to define a "base class."  A class
becomes a "base class" whenever some other class inherts from (extends) it.

A "base class" is also known as a "superclass", or a "parent class."

A "base class" is designed to be extended by (inherited from) other classes.
It is possible for a "base class" to be a regular Scala class,  as Scala
allows you to extend (inherit from) a regular class.

However, a "base class" is frequently written as an "abstract class" or as a "trait".
Because an "abstract class" and a "trait" can't be instantiated directly, they're
used only when a regular class inherits from (extends) them.

For details about abstract classes and traits, see these sections:

1) https://github.com/w9mwi/Scala_3/blob/main/Abstract_Classes_And_Methods
2) https://github.com/w9mwi/Scala_3/blob/main/Trait


============================================================================

DEFAULT ARGUMENTS AND NAMED ARGUMENTS
=====================================
Scala class constructors and Scala methods can be written to accept default arguments.
A default argument is an argument that doesn't need to be specified when the class
constructor, or the method, is invoked.  When a default argument isn't specified,
the code supplies the default value specified in the argument list.

When you instantiate a class, a trait, an object, or invoke a method, you can set
any of its argument values in any order you want as long as you specify the
argument's name when do so, like this...

printAddress(streetAddress = "9876 Main St.",
             city          = "Manitowoc",
             state         = "WI",
             zipCode       = 54220)

Study the following self-explanatory program to understand default and named arguments.

class Socket(val timeout: Int = 5_000, val linger: Int = 5_000):
  override def toString = s"timeout: $timeout, linger: $linger"

/******************
 * main()
 *****************/
@main def main():Unit =
  def defaultArgumentMethod(name:String = "No Name", id:Int = 0):Unit =
    println(s"name = $name,  id = $id")

  val s1 = Socket()
  println(s"s1 = $s1")  // PRINTS: s1 = timeout: 5000, linger: 5000
  val s2 = Socket(2_500)
  println(s"s2 = $s2")  // PRINTS: s2 = timeout: 2500, linger: 5000
  val s3 = Socket(10_000, 10_000)
  println(s"s3 = $s3")  // PRINTS: s3 = timeout: 10000, linger: 10000
  val s4 = Socket(timeout = 10_000)
  println(s"s4 = $s4")  // PRINTS: s4 = timeout: 10000, linger: 5000
  val s5 = Socket(linger = 10_000)
  println(s"s5 = $s5\n")  // PRINTS: s5 = timeout: 5000, linger: 10000

  defaultArgumentMethod() // PRINTS: name = No Name,  id = 0
  defaultArgumentMethod("Joe") // PRINTS: name = Joe,  id = 0
  defaultArgumentMethod(id = -123) // PRINTS: name = No Name,  id = -123
  defaultArgumentMethod(id = 987, name = "Sue") // PRINTS: name = Sue,  id = 987

============================================================================

AUXILIARY CLASS CONSTRUCTORS
============================
Most class definitions are written to have a single constructor, which
is known as the class's Primary Constructor.  However, you can define
a class that contains multiple constructors; so that class can be
instantiated using different argument lists.  These additional
constructors are called Auxiliary Constructors.

IMPORTANT: The first line of code executed by an Auxiliary Constructor
           MUST be a call to "this", which invokes the class's Primary
           Constructor.  So every time an Auxiliary Constructor is
           invoked, the first thing it must do is invoke the class's
           Primary Constructor.

import java.time.*

class Student(name:String, govtId:Int):
  // PRIMARY CONSTRUCTOR ***************************************************
  // Code at this indentation level will get executed once (and
  // only once) every time a new Student class is instantiated;
  // regardless of which constructors are invoked.
  print(s"\nname = $name, govtId = $govtId")

  // AUXILIARY CONSTRUCTOR #1 **********************************************
  def this(name:String, govtId:Int, applicationDate:LocalDate) =
    // The first line executed of an Auxiliary Constructor must invoke
    // the Primary Constructor, which is done by calling: this(name, govtId)
    this(name, govtId) // Invokes the Student class's Primary Constructor.
    print(s", applicationDate = $applicationDate")

  // AUXILIARY CONSTRUCTOR #2 **********************************************
  def this(name:String, govtId:Int, studentId:Int) =
    // The first line executed of an Auxiliary Constructor must invoke
    // the Primary Constructor, which is done by calling: this(name, govtId)
    this(name, govtId) // Invokes the Student class's Primary Constructor.
    print(s", studentId = $studentId")

/******************
 * main()
 *****************/
@main def main() =
  // The following line of code invokes ONLY the Primary Constructor.
  val stud1 = Student("Joe", 111)
  // PRINTS: name = Joe, govtId = 111

  // The following line invokes the Primary Constructor and Auxiliary Constructor #1.
  val stud2 = Student("Jane", 222, LocalDate.now());
  // PRINTS: name = Jane, govtId = 222, applicationDate = 2024-12-06

  // The following line invokes the Primary Constructor and Auxiliary Constructor #2.
  val stud3 = Student("Alice", 333, 444)
  // PRINTS: name = Alice, govtId = 333, studentId = 444



CASE CLASS
==========
 A "case class" requires at least one argument in its constructor.
 A regular Scala class doesn't require arguments in its  constructor.

All arguments in a "case class" constructor are public class members by default;
regardless if they're preceded with no text, or the "val"/"var" keyword.
When arguments in a "case class" constructor are preceded with no text,
they become vals by default.

For every "case class" that you write, Scala automatically generates the
following 2 methods.  (A regular Scala class doesn't generate these
2 methods.) For a regular class, you must manually write your own copy()
and unapply() methods within the body of the class.

copy()    - Creates and returns a new "case class" instance that's a copy
            of the existing case class.  If you pass this copy() method any
            arguments, those arguments specify the "case class" member values
            that will be changed in the copied-to (returned) instance.  Calling
            copy() without any arguments makes an exact copy of the "case class".

unapply() - The unapply() method serves as an extractor for pattern matching on
            a class.  (Pattern matching is invoked via the "match" keyword.)
            For every "case class" that you write, Scala automatically generates
            an unapply() method for you.  So you can perform pattern matching
            on every "case class" without having to write an unapply() method.
            If you want to perform pattern matching on a regular class, you must
            write your own unapply() method and add it to the class's body.

For every "case class" (and regular class) that you write, Scala also generates
the following 4 methods automatically.  See the "CLASS" section at the top of
this web page for details about these 4 methods.

apply()
equals()
hashCode()
toString()

A "case class" is Serializable by default.  A regular class isn't Serializable by default.

Like a regular class, a "case class" can be an abstract class.

In Scala 3, a "case class" can extend a trait, an abstract class, and a regular class.

The following program demonstrates two "case class" examples.

/******************
 * main()
 ******************/
@main def main():Unit =
  case class CaseClass_1(val name:String, var id:Int, weight:Double = 456.789D)
  case class CaseClass_2(product:String, serialNo:Int, price:Float):
    val myVal = -123.456F
    var myVar = "myVar can be updated."
    // Scala automatically generates a toString() method for every class
    // and "case class".  Here we override the toString() method so
    // we can customize it to print what we want.
    override def toString(): String =
      s"product = $product, serialNo = $serialNo, price = $price, " +
        s"myVal = $myVal, myVar = $myVar"


  val cc1 = CaseClass_1("Joe", 123)
  println(s"cc1.name = ${cc1.name}, cc1.id = ${cc1.id}, cc1.weight = ${cc1.weight}")
  // PRINTS: cc1.name = Joe, cc1.id = 123, cc1.weight = 456.789

  val cc2 = CaseClass_2(price = 78.21F, product = "Spoon", serialNo = 98765)
  cc2.myVar = "mayVar has been updated!"
  println(cc2.toString())
// PRINTS:
// product = Spoon, serialNo = 98765, price = 78.21, myVal = -123.456, myVar = mayVar has been updated!


SEALED CLASS
============
In Scala, 'sealed' is a keyword that's used like this:

sealed class Person(name:String, number:Int) ...
sealed case class Person(name:String, number:Int) ...
sealed trait SubjectObserver ...

As long as a class/trait isn't designated as a final class/trait (using the 'final'
keyword), a regular class/trait in Scala 3 can be extended by classes residing in
any source file

A sealed class/trait can be extended by other classes only if they reside within
the same source file where the sealed class/trait is defined.  Attempting to
extend a sealed class/trait in a file where it's not defined will result in a
compilation error.

Thus, the difference between a 'final' class/trait and a 'sealed' class/trait
is that a 'final' class/triat can never be extended; while a 'sealed' class/trait
can be extended only by classes residing in the same source file as the sealed
class/trait.

With regular classes, the compiler can't guarantee that it knows about all its
subclasses; because they may exist in other files.  This means the class's
unapply() method (that's used for pattern matching on the class) may work in
some instances, but not in others.

With sealed classes, the compiler will know about all its subclasses, so the
class's unapply() method (which is used for pattern matching on the class)
will always work.


OPEN CLASS
==========
Scala 3 allows an "open class" declaration, where 'open' is a soft keyword in Scala 3.

By default, a regular class located in one file can't extend (inherit from) a class contained
in a different file.  If the programmer wants to allow a class she writes to be extended
by classes located in other files, she can declare the class an "open class".

Having to explicitly designate classes as 'open' avoids common pitfalls in Obect-Oriented design.
In particular, it allows library designers to explicitly control the accessabilty of classes
they write.  If the programmer is OK with allowing a class she writes to be inherited
("extended") by classes located in other files, she should write an "open class"; otherwise,
if she wants to prohibit that behavior, it should be wriiten as a regular class.

4 Key Points of a Scala 'open class':
  1) Explicit Extension - Classes marked with the 'open' modifier are explicitly designed for extension.
  2) Default Behavior - Concrete (Regular) classes in Scala 3 are not open for extension by default.
  3) Abstract Classes and Traits - These are open by default, and don't require the 'open' modifier.
  4) Improved Library Design - This feature encourages library authors to clearly specify which classes
     are intended for extension.
