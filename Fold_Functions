SCALA FOLD FUNCTIONS
====================
The Scala API includes the fold, foldRight, and foldLeft functions
for all Scala collection classes, including the following:

Sequence Collections: Array          Set Collections: HashSet
                      ArrayBuffer                     LinkedHashSet
                      List                            Set
                      ListBuffer                      TreeSet
                      Queue
                      Stack
                      Vector

Map Collections: HashMap              Other Collections: Either
                 LinkedHashMap                           LazyList
                 Map                                     Option
                 TreeMap                                 BitSet

The fold, foldRight, and foldLeft functions each have 2 argument lists,
which makes them curried functions.  Recall that a curried function
is also a recursive function because a curried function returns a
function that calls itself.

The first argument list supplied to the fold, foldRight, and foldLeft
functions contains the "initial value", or a "start value."  The second
argument list supplied to the fold, foldRight, and foldLeft functions
contains the function to be invoked on every element of the collection.

The function that gets passed as an argument list to the fold, foldRight, and
foldLeft functions is often times a short/simple function that's written
as an anonymous function.  The following explains the differences between
the fold, foldRight, and foldLeft functions.

fold -       The fold function may process the collection's elements in any order.
             (An undetermined order.)  So use the fold function only when the
             processing order of a collection doesn't matter.

             You CAN use the fold function to perform mathematical addition or
             multiplication across all elements of a collection, because the
             order in which addition/multiplication is performed doesn't matter.

             You CAN'T use the fold function to perform mathematical subtraction
             or division across all elements of a collection, because the order
             in which subtraction/division is performed does matter.

foldRight - The foldRight function always processes the collection's elements
            from RIGHT TO LEFT.  Which means it processes the last element of
            the collection first, and its first element last.

foldLeft  - The foldLeft function always processes the collection's elements
            from LEFT TO RIGHT.  Which means it processes the last element of
            the collection first, and its first element last.

The following program demonstrates the fold, foldRight, and foldLeft concepts just discussed.

@main def main() =
  val doubleArray:Array[Double] = Array(1.23D, 3.45D, 6.78D)
  // When performing addition (or multiplication) on doubleArray,
  // fold, foldRight and foldLeft all return the same result
  // because the order in which the doubleArray elements are
  // added (or multiplied) doesn't change the result.
  var result:Double = doubleArray.fold(0.0D)(_+_)
  println(s"1) result = $result") // PRINTS: 1) result = 11.46
  result = doubleArray.foldRight(0.0D)(_+_)
  println(s"2) result = $result") // PRINTS: 2) result = 11.46
  result = doubleArray.foldLeft(0.0D)(_+_)
  println(s"3) result = $result") // PRINTS: 3) result = 11.46

  // When performing subtraction (or division) on doubleArray,
  // foldRight and foldLeft return different results because
  // the order in which doubleArray elements implement subtraction
  // and division changes the result.  The fold function should NOT
  // be used in instances like this, because the fold function
  // doesn't guarantee the order of the elements processed.
  result = doubleArray.fold(1.0D)(_/_) // This result CAN'T BE TRUSTED because the fold function
                                       // doesn't guarantee the order of the elements processed.
                                       // NOTE: The fold function often generates the same result
                                       //       as foldRight, as it does in this example shown below.
  println(s"4) result = $result") // PRINTS: 4) result = 0.03475730537733747
  result = doubleArray.foldRight(1.0D)(_/_) // (1.0 ÷ 6.78 ÷ 3.45 ÷ 1.23) = 2.4172173913043475
  println(s"5) result = $result") // PRINTS: 5) result = 2.4172173913043475 
  result = doubleArray.foldLeft(1.0D)(_/_)  // (1.0 ÷ 1.23 ÷ 3.45 ÷ 6.78) = 0.03475730537733747
  println(s"6) result = $result") // PRINTS: 6) result = 0.03475730537733747
end main
----------------------------------------------------------------------------------------------

The following programs demonstrate more examples of using fold, foldRight, and foldLeft.

----------------------------------------------------------------------------------------------
@main def main() =
  // SECTION 1) *************************************************************
  // This section demonstrates that when a collection is EMPTY, the fold,
  // foldLeft, and foldRight functions return only the "initial value",
  // which is the value passed to the function's first argument list.
  var intList:List[Int] = List[Int]()        // An EMPTY List[Int].
  var intResult: Int = intList.fold(77)(_-_) // _-_ is an anonymous function
  println(s"1) intResult = $intResult")      // PRINTS: 1) intResult = 77
  intResult = intList.foldLeft(77)(_-_)      // _-_ is an anonymous function
  println(s"2) intResult = $intResult")      // PRINTS: 2) intResult = 77
  intResult = intList.foldRight(77)(_-_)     // _-_ is an anonymous function
  println(s"3) intResult = $intResult")      // PRINTS: 3) intResult = 77

  // SECTION 2) *************************************************************
  intList = List[Int](7, 6, 5, 4, 3, 2, 1)
  // Given identical inputs, the fold and foldLeft functions often return
  // the same result.  However, the fold function doesn't guarantee the
  // order in which a collection's elements are processed; therefore,
  // NEVER use the fold function when processing order matters!
  intResult = intList.fold(77)(_-_)      // _-_ is an anonymous function
  println(s"4) intResult = $intResult")  // PRINTS: 4) intResult = 49

  // The math operation performed by foldLeft is:
  // 77−7−6−5−4−3−2−1 = 49
  intResult = intList.foldLeft(77)(_-_)  // _-_ is an anonymous function
  println(s"5) intResult = $intResult")  // PRINTS: 5) intResult = 49

  // The math operation performed by foldRight is:
  // (1-(2-(3-(4-(5-(6-7))))))-77 = -73
  intResult = intList.foldRight(77)(_-_) // _-_ is an anonymous function
  println(s"6) intResult = $intResult")  // PRINTS: 6) intResult = -73

  // SECTION 3) *************************************************************
  // This section is identical to SECTION 2) above except for this one
  // difference; the anonymous function passed to the 3 fold functions is:
  // (x,y)=>x-y
  // This anonymous function is functionally equivalent the _-_ anonymous
  // function used in SECTION 2) above.
  intResult = intList.fold(77)((x,y)=>x-y)      // (x,y)=>x-y is an anonymous function
  println(s"7) intResult = $intResult")         // PRINTS: 7) intResult = 49
  intResult = intList.foldLeft(77)((x,y)=>x-y)  // (x,y)=>x-y is an anonymous function
  println(s"8) intResult = $intResult")         // PRINTS: 8) intResult = 49
  intResult = intList.foldRight(77)((x,y)=>x-y) // (x,y)=>x-y is an anonymous function
  println(s"9) intResult = $intResult")         // PRINTS: 9) intResult = -73

  // SECTION 4) *************************************************************
  // This sections demonstrates how to count the number of characters in the
  // val wordList; using the foldLeft and foldRight functions.
  val wordList:List[String] = List[String]("How", "many", "characters", "are", "in", "this", "wordList?")

  val foldLeftFunc:(Int,String)=>Int = (count:Int, word:String) => count + word.length
  intResult = wordList.foldLeft(0)(foldLeftFunc)
  println(s"10) intResult = $intResult")         // PRINTS: 10) intResult = 35
  intResult = wordList.foldLeft(0)(_ + _.length) // This anonymous function is equivalent to foldLeftFunc.
  println(s"11) intResult = $intResult")         // PRINTS: 11) intResult = 35

  // foldRightFunc below is equivalent to foldLeftFunc above, except the
  // order of its argument list is swapped, so it'll work with foldRight.
  // The anonymous function below must also be written differently than
  // the one above, to make it work with foldRight.
  val foldRightFunc:(String,Int)=>Int = (word:String, count:Int) => count + word.length
  intResult = wordList.foldRight(0)(foldRightFunc)
  println(s"12) intResult = $intResult")          // PRINTS: 12) intResult = 35
  intResult = wordList.foldRight(0)(_.length + _) // This anonymous function is equivalent to foldRightFunc.
  println(s"13) intResult = $intResult")          // PRINTS: 13) intResult = 35

  // SECTION 5) *************************************************************
  // This section demonstrates how to concatenate all strings contained in a
  // List[String] using foldLeft and foldRight; and how their results differ.
  //
  // strConcatMethod and strConcatFunc defined here are functionally equivalent.
  def strConcatMethod(str1:String, str2:String):String = str1.concat("-").concat(str2)
  val strConcatFunc:(str1:String, str2:String)=>String =
      (str1:String, str2:String) => str1.concat("-").concat(str2)

  // Perform a string concat using both foldLeft and foldRight;
  // passing to them strConcatMethod as an argument.
  val strList:List[String] = List[String]("ABC", "DEF", "GHI", "JKL", "MNO")
  var strResult:String = strList.foldLeft("BEGIN")(strConcatMethod)
  println(s"14) strResult = $strResult") // PRINTS: 14) strResult = BEGIN-ABC-DEF-GHI-JKL-MNO
  strResult = strList.foldRight("END")(strConcatMethod)
  println(s"15) strResult = $strResult") // PRINTS: 15) strResult = ABC-DEF-GHI-JKL-MNO-END

  // Perform a string concat using both foldLeft and foldRight;
  // passing to them strConcatFunc as an argument.
  strResult = strList.foldLeft("BEGIN")(strConcatFunc)
  println(s"16) strResult = $strResult") // PRINTS: 16) strResult = BEGIN-ABC-DEF-GHI-JKL-MNO
  strResult = strList.foldRight("END")(strConcatFunc)
  println(s"17) strResult = $strResult") // PRINTS: 17) strResult = ABC-DEF-GHI-JKL-MNO-END
end main

----------------------------------------------------------------------------------------------

The following program demonstrates how to write a custom foldLeft function,
and a custom foldRight function.  Both of which are recursive functions.

----------------------------------------------------------------------------------------------

def myFoldLeft[A,B](list:List[A], initialValue:B)(function:(B,A)=>B):B =
  if (list.isEmpty)
    initialValue
  else
    function(myFoldLeft(list.tail, initialValue)(function), list.head)
end myFoldLeft

def myFoldRight[A,B](list:List[A], initialValue:B)(function:(A,B)=>B):B =
  if (list.isEmpty)
    initialValue
  else
    function(list.head, myFoldRight(list.tail, initialValue)(function))
end myFoldRight

def concatStr(str1:String, str2:String):String =
  str1.concat("-").concat(str2)
end concatStr

@main def main() =
  // ********************************************************************************
  // This section calls myFoldLeft and myFoldRight on a List[Int].
  val intList:List[Int] = List[Int](7, 6, 5, 4, 3, 2, 1)
  // The math operation performed by myFoldLeft is:
  // 77−7−6−5−4−3−2−1 = 49
  var intResult:Int = myFoldLeft(intList, 77)(_-_)
  println(s"1) intResult = $intResult") // PRINTS: 1) intResult = 49
  // The math operation performed by myFoldRight is:
  // (1-(2-(3-(4-(5-(6-7))))))-77 = -73
  intResult = myFoldRight(intList, 77)(_-_)
  println(s"2) intResult = $intResult") // PRINTS: 2) intResult = -73

  // ********************************************************************************
  // This section calls myFoldLeft and myFoldRight on a List[String].
  val strList:List[String] = List[String]("ABC", "DEF", "GHI", "JKL", "MNO")
  // The following line of code replicates the operation performed by myFoldLeft below.
  var strResult:String = concatStr(concatStr(concatStr(concatStr(concatStr("BEGIN", "MNO"), "JKL"), "GHI"), "DEF"), "ABC")
  println(s"3) strResult = $strResult") // PRINTS: 3) strResult = BEGIN-MNO-JKL-GHI-DEF-ABC
  strResult = myFoldLeft(strList, "BEGIN")(concatStr)
  println(s"4) strResult = $strResult") // PRINTS: 4) strResult = BEGIN-MNO-JKL-GHI-DEF-ABC

  // The following line of code replicates the operation performed by myFoldRight below.
  strResult = concatStr(concatStr(concatStr(concatStr(concatStr("ABC", "DEF"), "GHI"), "JKL"), "MNO"), "END")
  println(s"5) strResult = $strResult") // PRINTS: 5) strResult = ABC-DEF-GHI-JKL-MNO-END
  strResult = myFoldRight(strList, "END")(concatStr)
  println(s"6) strResult = $strResult") // PRINTS: 6) strResult = ABC-DEF-GHI-JKL-MNO-END
end main

----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
