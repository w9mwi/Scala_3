VARIABLE NUMBER OF ARGUMENTS
============================
Methods in Scala can be defined so a single argument can accept any number of
arguments, as long as they all have the same data type.  This concept is often
referred to as "varargs", which means a "variable number of arguments."

IMPORTANT: Only the last argument in a method's argument list can accept
           a variable number of arguments.  A method that contains multiple
           argument lists (a curried method) can accept one vararg per
           argument list, as long as it too is the last argument in the
           argument list.

The following program shows how the variableNoOfStringArgs() method can accept
a vararg.  Most of this code works with Scala 2 and Scala 3.  The last section
of this program shows how to call the variableNoOfStringArgs() method using
syntax that works only with Scala 3.

IMPORTANT: Every method that accepts a vararg always transforms that vararg into
           a Seq data type, which is a collection similar to an Array, or a List.
           Because the only way to store multiple values in a single argument
           is if the argument is a collection type.

/*********************************************************
 * When an asterisk char (*) appears after the last argument
 * in a method's argument list, it designates the argument
 * is a vararg, as this method demonstrates.  A vararg can
 * get passed zero arguments, one argument, or multiple
 * arguments separated by commas.
 *
 * Although the str argument appears to be declared a String
 * type in the argument list, str is NOT a String type; because
 * a String can't hold multiple String values, as a vararg can.
 *
 * When a method's argument is designated as a vararg, the compiler
 * transforms that argument into a Seq type, which is capable of
 * holding any number of values.  In this example str becomes a
 * Seq[String] type because the argument is declared a String.
 *
 * Therefore, inside the method, a vararg always becomes a Seq
 * collection of values.  If the vararg is declared type String,
 * it becomes a Seq[String].  If the vararg is declared type
 * Boolean, it becomes a Seq[Boolean]. Etc.
 * Read in-line comments below for details.
 *
 * @param str - A variable number of String arguments.
 * @return String
 *********************************************************/
def variableNoOfStringArgs(str:String *):String =
{
  // Here we verify that str is of type: Seq[String]
  if (str.isInstanceOf[Seq[String]])
    println("str is of type: Seq[String]") // PRINTS: str is of type: Seq[String]

  // Return all strings passed to this method in a single string, separated by space (" ") chars.
  str.mkString(" ")
}

/*********************************************************
 * main()
 ********************************************************/
@main def main() =
  // Confirm the method can be passed no arguments.
  var strResult:String = variableNoOfStringArgs()
  println(s"1) strResult = $strResult\n") // PRINTS: 1) strResult =

  // Confirm the method can be passed one String argument.
  strResult = variableNoOfStringArgs("Wednesday")
  println(s"2) strResult = $strResult\n") // PRINTS: 2) strResult = Wednesday

  // Confirm the method can be passed multiple String arguments.
  strResult = variableNoOfStringArgs("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
  println(s"3) strResult = $strResult\n") // PRINTS: 3) strResult = Sunday Monday Tuesday Wednesday Thursday Friday Saturday


  // ***********************************************************************
  // In the above section we passed only a String type to the method
  // variableNoOfStringArgs().  In this section we demonstrate that a
  // vararg can always accept a collection.  Where the collection must
  // be a Seq type, and the collection must contain the same type that the
  // vararg is declared, which in this example is a String.
  //
  // The reason why a vararg can always accept a collection is because
  // a vararg is always automatically transformed into a Seq type (which
  // is a collection) within the method.
  //
  // When a collection is passed to a vararg, the collection's name must
  // be followed by the text ":_*" (for Scala 2 or Scala 3), or "*" (for
  // Scala 3 only).  In the code below, we pass to variableNoOfStringArgs()
  // the following data types as a vararg.
  // * List[String]
  // * Seq[String]
  // * Array[String]
  // * Vector[String]
  val listOfWords:List[String] = List("Tomorrow", "is", "a", "different", "day.")
  strResult = variableNoOfStringArgs(listOfWords:_*)
  println(s"4) strResult = $strResult\n") // PRINTS: 4) strResult = Tomorrow is a different day.

  val seqOfWords:Seq[String] = listOfWords.toSeq
  strResult = variableNoOfStringArgs(seqOfWords:_*)
  println(s"5) strResult = $strResult\n") // PRINTS: 5) strResult = Tomorrow is a different day.

  val arrayOfWords: Array[String] = listOfWords.toArray
  strResult = variableNoOfStringArgs(arrayOfWords: _*)
  println(s"6) strResult = $strResult\n") // PRINTS: 6) strResult = Tomorrow is a different day.

  val vectorOfWords: Vector[String] = listOfWords.toVector
  strResult = variableNoOfStringArgs(vectorOfWords:_*)
  println(s"7) strResult = $strResult\n") // PRINTS: 7) strResult = Tomorrow is a different day.

  // NOTICE:  The ":_*" text in the 4 above calls to variableNoOfStringArgs() can be eliminated
  //          (in Scala 2 and Scala 3) by replacing that text with a call to the mkString(" ")
  //          method as shown here...
  strResult = variableNoOfStringArgs(vectorOfWords.mkString(" "))
  println(s"8) strResult = $strResult\n") // PRINTS: 8) strResult = Tomorrow is a different day.


  // ***********************************************************************
  // This section works only with Scala 3.  It does exactly the same as
  // 5), 6), 7), and 8) above, except it replaces the ":_*" text with
  // a single asterisk char (*) when calling variableNoOfStringArgs().
  strResult = variableNoOfStringArgs(listOfWords*)
  println(s"9) strResult = $strResult\n") // PRINTS: 9) strResult = Tomorrow is a different day.

  strResult = variableNoOfStringArgs(seqOfWords*)
  println(s"10) strResult = $strResult\n") // PRINTS: 10) strResult = Tomorrow is a different day.

  strResult = variableNoOfStringArgs(arrayOfWords*)
  println(s"11) strResult = $strResult\n") // PRINTS: 11) strResult = Tomorrow is a different day.

  strResult = variableNoOfStringArgs(vectorOfWords*)
  println(s"12) strResult = $strResult\n") // PRINTS: 12) strResult = Tomorrow is a different day.
