SCALA 3 INDENTATION RULES

Before discussing the Scala 3 control structures below, you should
first understand the indentation rules that Scala 3 source code must
comply with.

Scala 3 allows control structures to execute multiple lines of code
without placing those multiple lines of code between a braces pair {},
as is required in previous Scala versions.  However, Scala 3 allows
this behavior only if the source code follows indentation rules.

The following code snippets won't compile in a Scala 3 program because
the indentation rules are violated.  When you want a Scala 3 program's
control structure to execute multiple lines of code without using a
braces pair {}, the multiple lines of code you want to execute must
be indented to the same column number (or greater) than the first
line of code that gets executed.

The following Scala 3 code snippets won't compile.  Search for the
text "WON'T COMPILE" to see instructions on how to fix.

======================================================================
CODE SNIPPET NO. 1

  val x = 3
  if x == 2 then
    println("x = 2")
    println("x equals 2.")
  else if x == 3 then
    println("x = 3")
   println("x equals 3.")  // WON'T COMPILE!
                           // To fix, indent one (or more) space to the right.
  else println("x is some number other than 2 or 3.")

CODE SNIPPET NO. 2

  val intList = List(-3, -2, -1, 0, 1, 2, 3)
  for int <- intList do print("x")
// WON'T COMPILE!  To fix, both of the following print statements must
// be indented to the same column (or greater) as above "for" keyword.
print("y")
 print("z ")

=====================================================================

SCALA 3 CONTROL STRUCTURES

The Scala 3 program below demonstrates how to use the following
Scala 3 control structures:

* if expressions
* while loops
* for loops
* for expressions
* match expressions
* try/catch

=====================================================================

@main def main() =
  val intList = List(-3, -2, -1, 0, 1, 2, 3)
  val intValue = 3

  // ****************************************************************
  // ****************************************************************
  // IF EXPRESSIONS
  //
  // Every if statement gets evaluated to an expression, which means
  // all if statements return a value.  Here is an example.
  var var_String:String = if intList(5) < 0 then "negative"
                          else if intList(5) == 0 then "zero"
                          else "positive"
  println(s"var_String = $var_String\n") // PRINTS:  var_String = positive

  // The following if statement works with Scala 3.  "then" is a new
  // keyword added in Scala 3 that follows "if" and "else if", but
  // CAN'T follow "else".  When an if statement uses the new Scala 3
  // "then" keyword, it eliminates the need for the if statement's
  // parenthesis pair (), and it eliminates the need for the braces
  // pair {} following "if" and "else if".
  print("if statement #1 result:  ")
  if intValue > 0 then
    print("intValue = positive;  ") // PRINTS:  if statement #1 result:  intValue = positive;  abc
    print("a")
    print("b")
    println("c")
  else if intValue == 0 then
    print("intValue = zero;  ")
    print("x")
    print("y")
    println("z")
  else
    println("intValue = negative;  ")

  // The following if statement works with all Scala versions and
  // is equivalent to the above if statement.  Because the "then"
  // keyword isn't used here, this if statement requires the if
  // statement's parenthesis pair (), and it requires the braces
  // pair {} following "if" and "else if".
  print("if statement #2 result:  ")
  if (intValue > 0) {
    print("intValue = positive;  ") // PRINTS:  if statement #2 result:  intValue = positive;  abc
    print("a")
    print("b")
    println("c")
  }
  else if (intValue == 0) {
    print("intValue = zero;  ")
    print("x")
    print("y")
    println("z")
  }
  else
    println("intValue = negative;  ")


  // ****************************************************************
  // FOR LOOPS
  //
  // The following for loop works with Scala 3.  The "do" keyword
  // used in a Scala 3 for loop eliminates the need for the loop's
  // parenthesis pair () and braces pair {}.
  print("\nfor loop #1 result:  ")
  for int <- intList do
    print("x")
    print("y")
    print("z ") // PRINTS:  for loop #1 result:  xyz xyz xyz xyz xyz xyz xyz

  // The following for loop works with all Scala versions and
  // is equivalent to the above for loop.  Because the "do"
  // keyword isn't used here, this for loop requires the
  // parenthesis pair () and the braces pair {}.
  print("\nfor loop #2 result:  ")
  for (int <- intList) {
    print("x")
    print("y")
    print("z ") // PRINTS:  for loop #2 result:  xyz xyz xyz xyz xyz xyz xyz
  }

  // ****************************************************************
  // FOR LOOPS THAT IMPLEMENT GUARDS
  //
  // An if expression contained within a for loop is called a "guard."
  // An if expression that's used as a "guard" can contain only an "if";
  // not a "then", not an "else if", and not an "else".
  //
  // The for loop in the following example contains a "guard" that
  // allows only Int values less than 1 to be printed.
  print("\nfor loop #3 result:  ")
  for
    int <- intList
    if int < 1
  do
    print(int + ", ") // PRINTS:  for loop #3 result:  -3, -2, -1, 0,

  // The for loop in the following example contains 2 "guards" which
  // allow only Int values less than 1 and greater than -2 to be printed.
  print("\nfor loop #4 result:  ")
  for
    int <- intList
    if int < 1
    if int > -2
  do
    print(int + ", ") // PRINTS:  for loop #4 result:  -1, 0,

  // ****************************************************************
  // A FOR LOOP CAN BECOME AN EXPRESSION BY IMPLEMENTING THE yield KEYWORD.
  //
  // The for loop in this example implements the yield keyword, which
  // transforms it into an expression by returning a value.  A for loop
  // can be written using a parenthesis pair (), or a braces pair {},
  // or in Scala 3 without either.
  var var_listInt:List[Int] = for (i <- intList; zzz = 3.21) yield i * 2
  var_listInt               = for {i <- intList; zzz = 3.21} yield i * 2
  var_listInt               = for  i <- intList; zzz = 3.21  yield i * 2
  println(s"\n\nvar_listInt = $var_listInt") // PRINTS: var_listInt = List(-6, -4, -2, 0, 2, 4, 6)

  // In this example the for expression converts all names in var_ListStr
  // to upper case, and returns that result back into var_ListStr.
  var var_ListStr = List("jOe", "moE", "janIce")
  var_ListStr = for name <- var_ListStr yield name.toUpperCase
  println(s"var_ListStr = $var_ListStr") // PRINTS:  var_ListStr = List(JOE, MOE, JANICE)

  // The following for expression obtains the string length of all strings in
  // var_ListStr that are longer 4 chars in length; then returns those values
  // into var_listInt.
  var_ListStr = List("apple", "banana", "lime", "orange")
  var_listInt = for fruit <- var_ListStr
                    if fruit.length > 4
                yield fruit.length
  println(s"var_listInt = $var_listInt") // PRINTS:  var_listInt = List(5, 6, 6)

  print("\nTHE END.")
