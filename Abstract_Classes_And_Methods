ABSTRACT METHODS AND MEMBERS
============================
An abstract method is a method that's defined, but contains no body
of executable code, which means it's not implemented.  An abstract
member is a val/var that's declared, but not initialized.  Abstract
methods and members can exist only in an abstract class, or in a trait.

Methods that contain a body of executable code are called concrete methods.
Members (vals/vars) that are initialized to some value are called concrete
members.

Concrete methods and members can exist inside a regular class, inside an
abstract class, inside a trait, and inside of the main() method.


ABSTRACT CLASS
==============
Unlike a regular Scala class, an abstract class can't be instantiated.  An
abstract class can only be used by a regular class that inherits from it.

When class A inherits from class B, class A is the superclass; class B
is the subclass.

A Scala class can be written as an abstract class when the "abstract" keyword
precedes the "class" keyword, and it contains at least one method that's not
implemented, or at least one member that's not initialized.  The following
program shows an example of this.


abstract class Animal:
  def ageInYears:Int // ageInYears is an abstract method.
  val bodyTemp:Int   // bodyTemp is an abstract member.

// The following IrishSetter class inherits from the Animal class by
// implementing the "extends" keyword.  This class wouldn't compile
// if it didn't initialize bodyTemp to some value, or if it didn't
// implement the ageInYears method.
class IrishSetter(name: String) extends Animal:
  val bodyTemp = 93
  def ageInYears = 12
  // Every class has a default toString() method.  Here we override that
  // method with our own toString definition so it prints relevant info.
  override def toString = s"This Irish Setter is named $name; it's $ageInYears years old."

/******************
 * main()
 *****************/
@main def main():Unit =
  val dog = IrishSetter("Big Red")
  println(s"dog = $dog")
  // PRINTS:  dog = This Irish Setter is named Big Red; it's 12 years old.


// ***************************************************************
REWRITE THIS SECTION LATER.  REGARDING THE "final" AND "protected" KEYWORDS.
The "protected" keyword is used
If methods contained in a base class should be invoked by the base class, or classes
that inherit from it,

When you want a class member or method that CAN'T be overridden in a subclass,
use the "final" keyword.  You can also define an entire class using
the "final" key word, which means that no subclass can modify it.
The most common example of why you'd want to define a class as
"final" is when you want that class to be immutable--so no subclass
can modify it.
// ***************************************************************


TRAIT VS. ABSTRACT CLASS
========================
As mentioned above, a Scala trait (like an abstract class) can also contain
abstract methods and abstract members.  A trait containing an abstract method,
or an abstract member, can then be inherited by another trait.

So when you want to write a class that implements abstract methods/members, you can write
either an abstract class, or a trait, to contain those abstract methods/members.  So then
your class can inherit from either the trait you wrote, or inherit from the abstract class
you wrote.  That leads to the following question...

QUESTION: When you need to write abstract methods/members, should they be contained
          in a Scala trait, or in an abstract class?

ANSWER:   Scala 2 traits can't accept arguments, but abstract classes (in both Scala 2
          and Scala 3) can accept arguments.  So with Scala 2 code, if you needed a
          base class that accepts constructor arguments, you had to use an abstract
          class.  Since Scala 3 traits now accept arguments, it's recommended that
          you use a trait to hold abstract methods/members, instead of an abstract
          class.  Then, inherit that trait from a regular class.

IMPORTANT:  A class can inherit from only one class, and from any number of traits.
            Generally, you should use a trait to hold methods and members that can
            would apply to different class types.  For example, assume you had 3
            classes named Boat, Car, and Jet; and all 3 of those classes implemented
            methods named startEngine(), travel(), and stopEngine().  You could place
            those 3 methods in a trait named Action, where you'd define each one as
            either an abstract method, or a concrete method.  Finally, the Boat,
            Car, and Jet classes would all inherit from that Action trait.
