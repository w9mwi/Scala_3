ABSTRACT METHODS AND MEMBERS
============================
An abstract method is a method that's defined, but contains no body
of executable code, which means it's not implemented.  An abstract
member is a val/var that's declared, but not initialized.  Abstract
methods and members can exist only in an abstract class, or in a trait.

Methods that contain a body of executable code are called concrete methods.
Members (vals/vars) that are initialized to some value are called concrete members.

Concrete methods and members can exist inside a regular class,
inside an abstract class, inside a trait, and inside of the
main() method.


ABSTRACT CLASS
==============
Unlike a regular Scala class, an abstract class can't be instantiated.  An
abstract class can only be used by a regular class that inherits from it,
which is known as a superclass.

A Scala class can be written as an abstract class when the "abstract" keyword
precedes the "class" keyword, and it contains at least one method that's not
implemented, or at least one member that's not initialized.  The following
program shows an example of this.


abstract class Animal:
  def ageInYears:Int // ageInYears is an abstract method.
  val bodyTemp:Int   // bodyTemp is an abstract member.

// The following IrishSetter class inherits from the Animal class by
// implementing the "extends" keyword.  This class wouldn't compile
// if it didn't initialize bodyTemp to some value, or if it didn't
// implement the ageInYears method.
class IrishSetter(name: String) extends Animal:
  val bodyTemp = 93
  def ageInYears = 12
  // Every class has a default toString() method.  Here we override that
  // method with our own toString definition so it prints relevant info.
  override def toString = s"This Irish Setter is named $name; it's $ageInYears years old."

/******************
 * main()
 *****************/
@main def main():Unit =
  val dog = IrishSetter("Big Red")
  println(s"dog = $dog")
  // PRINTS:  dog = This Irish Setter is named Big Red; it's 12 years old.



The "protected" keyword is used
If methods contained in a base class should be invoked by the base class, or classes
that inherit from it,

When you want a class member or method that CAN'T be overridden in a subclass,
use the "final" keyword.  You can also define an entire class using
the "final" key word, which means that no subclass can modify it.
The most common example of why you'd want to define a class as
"final" is when you want that class to be immutable--so no subclass
can modify it.
