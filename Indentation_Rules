SCALA 3 INDENTATION RULES

Before you begin to learn Scala 3 programming, you should first read this
section to understand the indentation rules enforced by the Scala 3 compiler.

Scala 3 allows control structures to execute multiple lines of code without
placing those multiple lines of code between a braces pair {}, as previous
Scala versions require.  Only when the source code follows specific indentation
rules does Scala 3 allow executing multiple lines of code without the braces
pair {}.

These indentation rules apply not only to Scala 3 control structures such as
if expressions, for loops, for expressions, while loops, etc.  They also
apply to writing Scala 3 methods/functions, classes, objects, traits, etc.,
where you want to execute multiple lines of code without placing that code
between a braces pair {}.

The following code samples demonstrate Scala 3 indentation rules.


======================================================================
In the following code example, notice the colon char (:) at the end of
the first line of the single trait definition, and at the end of the
first line of the two class definitions.

When a colon char (:) appears at the end of the first line of a
definition for a Scala 3 class, object, trait, enum, etc. it acts
as a replacement for the braces pair {}.

When a colon char (:) is used to replace a braces pair {}, these 2 rules apply:

* The definition of the class, object, trait, etc. terminates with the first
  line encountered that's blank, empty, or contains only whitespace.

* All lines that are part of the definition must be indented to the
  RIGHT of the keyword 'class', 'object', 'trait', etc.

Method/Function definitions don't use a colon char (:) to replace the
braces pair {}.  To see how method/function definitions can eliminate
the use of a braces pair {}, see the calculateAndPrintSum() method
definition below.

@main def main() =
  trait Engine(engineType:String):
    def startEngine(): Unit = println(s"$engineType engine started.")
    def stopEngine(): Unit  = println(s"$engineType engine stopped.")

  class Automobile(engineType: String) extends Engine(engineType):
    override def startEngine(): Unit = println(s"$engineType engine started.")
    override def stopEngine(): Unit = println(s"$engineType engine stopped.")

  class Jet(engineType: String) extends Engine(engineType):
    override def startEngine(): Unit = println(s"$engineType engine started.")
    override def stopEngine(): Unit = println(s"$engineType engine stopped.")

  // A method/function definition that executes multiple lines of code without
  // using the braces pair {} (as show below) don't contain a colon char (:)
  // at the end of its first line, as do class, trait, etc. definitions.  When
  // a method/function is defined to execute multiple lines of code without
  // using a braces pair {}, the syntax shown below is used.  Where all lines
  // of code within its body must be indented to the RIGHT of the 'def' keyword.
  def calculateAndPrintSum(a: Int, b: Int):Unit =
    val sum = a + b
    println(s"The sum of $a + $b = $sum")

  val auto = Automobile("Gasoline")
  val jet  = Jet("Jet")
  auto.startEngine()  // PRINTS:  Gasoline engine started.
  jet.startEngine()   // PRINTS:  Jet engine started.
  jet.stopEngine()    // PRINTS:  Jet engine stopped.
  auto.stopEngine()   // PRINTS:  Gasoline engine stopped.
  calculateAndPrintSum(123, 321) // PRINTS:  The sum of 123 + 321 = 444


======================================================================
The following code snippets demonstrate Scala 3 indentation rules
for the following control structures:

* if expressions
* for loops


// CODE SNIPPET NO. 1
// WON'T COMPILE!  To fix, indent the println("x equals 3.") line of
// code one (or more) space to the right:

  val x = 3
  if x == 2 then
    println("x = 2")
    println("x equals 2.")
  else if x == 3 then
    println("x = 3")
   println("x equals 3.")
  else println("x is some number other than 2 or 3.")

---------------------
// CODE SNIPPET NO. 2
// WON'T COMPILE!  To fix, both the print("y") and print("z ") statements
// must be indented to the same column (or greater) as the "for" keyword.

  val intList = List(-3, -2, -1, 0, 1, 2, 3)
  for int <- intList do print("x")
print("y")
 print("z ")

---------------------
// CODE SNIPPET NO. 3
// The following code will compile, but print("y") and print("z ")
// aren't part of the for loop.
  val intList = List(-3, -2, -1, 0, 1, 2, 3)
  for int <- intList do print("x")
    print("y")
    print("z ")

// To make all 3 print statements execute with the for loop, the above code
// code is restructured (2 different ways) in the next 2 for loops; so all
// 3 print statements are located below the "do" keyword, and indented to
// the right of the "for" keyword.
  for int <- intList do
    print("x")
    print("y")

    // The following print("z ") statement is part of the above for loop because
    // it has the same indentation as the 2 print statements above it.
    print("z ")

  // The following println statement isn't part of the above for loop because
  // it's indented to the same location as the above "for" keyword, which
  // is also to the left of the above 3 print statements.
  println("\nNot part of the above for loop.")

  // All 3 print statements in the following for loop are executed as part
  // of the for loop.
  for int <- intList
  do
    print("x")
    print("y")
    print("z ")

// Only the print("x") statement is executed as part of the following for loop.
  for int <- intList do
  print("x")
  print("y")
