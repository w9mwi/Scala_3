OPTION
======
In Scala, an Option type will always contain either a single value, or no value.
An Option class has behavior similar to a Scala List because you can invoke the
following methods on an Option, as you can a List.

* collect()                           * forAll()
* contains()                          * forEach()
* exists()                            * isEmpty()
* filter()                            * map()
* flatMap()                           * toList()
* flatten()                           * zip(), unzip()
* fold(), foldLeft(), foldRight()



When an Option contains a single value, that value is wrapped in the Some class.
When an Option contains no value, that value is represented as the None object.
Every instance of scala.Option will be one of the following:

   * scala.Some  (A Scala class that extends the class:  Option[A])
   * scala.None  (A Scala object that extends the class: Option[Nothing])

The following program demonstrates:
   * Option(54321) and Some(54321) are equivalent expressions.
   * None and Option.empty are equivalent expressions.
---------------------------------------------------------------------------------------------------
@main def main() =
  val number_1:Option[Int] = Option(54321)
  val number_2:Some[Int]   = Some(54321)
  val number_3:Option[Int] = None
  val number_4:Option[Int] = Option.empty

  if (number_1 == number_2)
  then println("number_1 == number_2") // PRINTS: number_1 == number_2
  number_2 match
    case number_1 => println("number_2 == number_1") // PRINTS: number_2 == number_1
    case _        => println("number_2 != number_1") // This line never executes.


  if (number_3 == number_4)
  then println("number_3 == number_4") // PRINTS: number_3 == number_4
  number_4 match
    case number_3 => println("number_4 == number_3") // PRINTS: number_4 == number_3
    case _        => println("number_4 != number_3") // This line never executes.
end main
---------------------------------------------------------------------------------------------------
