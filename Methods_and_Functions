This web page covers the following topics, all of which are related to
Scala methods and functions.  Each of these topics contains its own
section; each section is designated with a heading of the same name.

* METHODS
* FUNCTIONS
* ETA EXPANSION
* ANONYMOUS FUNCTION
* NULLARY FUNCTION
* PARTIAL FUNCTION
* FUNCTIONS BUILT WITH ONLY CASE STATEMENTS

METHODS
=======
A Scala method is always written using the "def" keyword.

IMPORTANT: The "def" keyword can also be used to define an abstract value
           (a val/var that's declared, but not initialized), or to define
           an abstract method (a method that's declared, but has no body
           of executable code).  Abstract vals/vars, and abstract methods
           are used only in Scala traits and in Scala abstract classes.

In Scala 2 a method must be defined inside another construct, such as...

* abstract class
* class
* case class
* object
* case object
* trait

In Scala 3 a method can also be defined outside any of those constructs,
as a stand-alone method.  These methods are known as "top-level"
definitions because they're not nested within another definition.
In other words, methods in Scala 3 can be defined almost anywhere.

In Scala 3 the last line of a method definition can include the new
Scala 3 soft keyword "end" followed by the method name.  Adding this
text to the end of a method in Scala 3 is optional, but makes it easier
to see exactly where a method definition ends.

Below is a Scala 3 program that defines two stand-alone methods, and uses
the Scala 3 soft keyword "end" to designate the end of both methods.

def printName(name: String) =
  println(s"name is: $name")
end printName // This line is optional in Scala 3.
/*********************************************************
 * main()
 ********************************************************/
@main def main() =
  printName("Sally") // PRINTS: name is: Sally

  def squareMethod(number: Float): Float =
    number * number
  end squareMethod // This line is optional in Scala 3.

  println(s"squareMethod(123.456F) = ${squareMethod(123.456F)}")
  // PRINTS: squareMethod(123.456F) = 15241.384

Scala methods that contain no arguments can be written these 2 ways:

1) with empty parenthesis, like this:  def writeToFile():Unit = ...

   Use empty parenthises when the method has side effects, like
   printing text to the screen, manipulating a file, etc.

2) with no parenthesis, like this: def calculateDistance:Double = ...

   Use no parenthises when the method doesn't have any side effects;
   like when it only calculates and returns a result.

This is just a suggestion/convention; it's not enforced.  Even if you
adhere to this convention, it doesn't mean other programmers will do
the same.  Don't assume that code you didn't write follows this convention.



