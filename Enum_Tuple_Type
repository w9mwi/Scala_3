This page covers the following 3 topics, each of which 
has a dedicated section below.

1) Enums.  A Scala enumeration type is declared via the
   'enum' keyword, which is a new keyword in Scala 3.

2) Tuples.  There is no keyword for specifying a tuple in Scala.
   A tuple is just a collection of multiple data types.  For
   example, instead of a method returning a single value that's
   an Int, or a String, or a List[Double], a method could return
   three separate values of any type.  For example a method could
   return this tuple:  (Int, String, List[Double])

3) Types.  You can create a data type having a name that you specify,
   by using the Scala keyword 'type'.   That name will then refer to
   a data type.  For example, the following code defines a type named
   Score, which has a tuple type of (Int, Int).

    type Score = (Int, Int)  // Defines a data type named 'Score'.
    val finalScore: Score = (42, 13)


==============================================================
ENUM
====
Scala 3 added the new keyword 'enum'.  Scala compiles enums to a
sealed class, which means that an enum can contain fields and methods.
The following program demonstrates the use of enums.

@main def main() =
  // NOTE: All enum definitions must include the 'case' keyword.
  enum Permissions:
    case READ, WRITE, EXEC, NONE

  val perm1: Permissions = Permissions.READ
  println(s"perm1 = $perm1")  // PRINTS: perm1 = READ
  val perm2: Permissions = Permissions.WRITE
  val perm3: Permissions = Permissions.EXEC
  val perm4: Permissions = Permissions.NONE
  println(s"perm1.ordinal = ${perm1.ordinal}, perm2.ordinal = ${perm2.ordinal}, " +
          s"perm3.ordinal = ${perm3.ordinal}, perm4.ordinal = ${perm4.ordinal}")
  // PRINTS: perm1.ordinal = 0, perm2.ordinal = 1, perm3.ordinal = 2, perm4.ordinal = 3

  val allPermissions: String = Permissions.values.mkString(", ")
  println(s"allPermissions = $allPermissions")
  // PRINTS: allPermissions = READ, WRITE, EXEC, NONE

  val execPermission: Permissions = Permissions.valueOf("EXEC")
  println(s"execPermission = $execPermission") // PRINTS: execPermission = EXEC

  // **********************************************************************

  // NOTE: enum arguments MUST be preceded with the 'val' or 'var' keyword,
  // as shown here.  Because an enum is compiled to a class, an enum
  // can contain methods and fields.  The following enum contains the
  // method intToHexString.
  enum PermissionBits(val bits: Int):
    case READ  extends PermissionBits(4) // 4 = 100 binary
    case WRITE extends PermissionBits(2) // 2 = 010 binary
    case EXEC  extends PermissionBits(1) // 1 = 001 binary
    case NONE  extends PermissionBits(0) // 0 = 000 binary
    def intToHexString: String = "0x" + Integer.toHexString(bits)

  // Because Scala 3 compiles an enum to a class, an enum can
  // have a companion object.  Since the following object has
  // the same name as the above enum PermissionBits, it becomes
  // that enum's companion object.
  object PermissionBits:
    def getPermissionStatus(bits: Int): PermissionBits = {
      bits match
        case 4 => PermissionBits.READ
        case 2 => PermissionBits.WRITE
        case 1 => PermissionBits.EXEC
        case _ => PermissionBits.NONE
    }

  val read:PermissionBits  = PermissionBits.READ
  val bitsInt:Int          = read.bits
  val bitsHexString:String = read.intToHexString
  val bitsPermission: PermissionBits = PermissionBits.getPermissionStatus(2)
  println(s"read = $read, bitsInt = $bitsInt, bitsHexString = $bitsHexString, bitsPermission = $bitsPermission")
  // PRINTS: read = READ, bitsInt = 4, bitsHexString = 0x4, bitsPermission = WRITE


==============================================================
TUPLE
=====
A tuple is a single value that contains multiple values.
Each value contained in a tuple can be of any data type.
The Scala program in the 'TYPE' section below demonstrates
the use of tuples.


==============================================================
TYPE
====
The Scala keyword 'type' is used to define your own data type;
so the type has a meaningful name.  Here are some examples:

// Define MyInt to be a data type that's an Int.  This use
// doesn't really make sense, but it demonstrates that you
// can define a new data type that's identical to a Scala
// data type.
type MyInt = Int
val index:MyInt = 123

// This example is self explanatory.  It defines a new data type
// named Coordinate, which is a tuple.  The Scala program below
// demonstrates use of 'tuple' and 'type' keywords.
type Coordinate = (Double, Double, Double)
val x = -123.45D
val y =  456.78D
val z =  987.65D
val currentLocation: Coordinate = (x, y, z)

==============================================================
@main def main() =
  // Build the tupleA value...
  val doubleArray = Array(-9.99D, 6.66D, 3.33D)
  val intList = List(1, 2, 3)
  val tupleA = (13, "thirteen", intList, doubleArray)

  // The following println statement shows how to access individual
  // tuple values via a method call to...  ._1, ._2, etc.
  println(s"tupleA._1 = ${tupleA._1}, tupleA._2 = ${tupleA._2}," +
          s"  tupleA._3 = ${tupleA._3}, tupleA._4     = Array(${tupleA._4.mkString(", ")})")
  // PRINTS: tupleA._1 = 13, tupleA._2 = thirteen,  tupleA._3 = List(1, 2, 3), tupleA._4     = Array(-9.99, 6.66, 3.33)

  // The following println statement shows how to access individual
  // tuple values via an index... (0), (1), etc.
  println(s"tupleA(0) = ${tupleA(0)}, tupleA(1) = ${tupleA(1)}," +
          s"  tupleA(2) = ${tupleA(2)}, tupleA(3)     = Array(${tupleA(3).mkString(", ")})")
  // PRINTS: tupleA(0) = 13, tupleA(1) = thirteen,  tupleA(2) = List(1, 2, 3), tupleA(3)     = Array(-9.99, 6.66, 3.33)

  // Here we define a new data type named TupleA, having the same
  // data type as val tupleA declared above  This TupleA data type
  // is then is used by the tupleMethod() defined below.
  type TupleA = (Int, String, List[Int], Array[Double])

  def tupleMethod(tuple: TupleA): TupleA = {
    // Create a new tuple and return it.
    val result: TupleA = (17, "seventeen", tuple(2), tuple(3))
    result
  }

  val tupleB = tupleMethod(tupleA)
  // Print the contents of tupleB.
  println(s"tupleB(0) = ${tupleB(0)}, tupleB(1) = ${tupleB(1)}," +
          s" tupleB(2) = ${tupleB(2)}, tupleB(3)     = Array(${tupleB(3).mkString(", ")})")
  // PRINTS: tupleB(0) = 17, tupleB(1) = seventeen, tupleB(2) = List(1, 2, 3), tupleB(3)     = Array(-9.99, 6.66, 3.33)

  // Here, the tupleMethod() returns its result into 4 different vals.
  val (myInt, myString, myIntList, myDoubleArray) = tupleMethod(tupleA)
  println(s"myInt     = $myInt, myString  = $myString," +
          s" myIntList = $myIntList, myDoubleArray = Array(${myDoubleArray.mkString(", ")})")
  // PRINTS: myInt     = 17, myString  = seventeen, myIntList = List(1, 2, 3), myDoubleArray = Array(-9.99, 6.66, 3.33)
