FUNCTIONAL PROGRAM MODELING
===========================

When you write a Scala program using the Functional Programing Paradigm
(instead of the Object-Oriented Paradigm), the program is typically
modeled using these Scala constructs:

* Enumerations
* Case classes
* Traits

With Functional Programming the data and the operations on that data are
separated.  You donâ€™t need to encapsulate them together in a single class,
as you might with Object-Oriented Programming.  For example, a set of numbers
(which is the data), and the operations performed on those numbers (which is
the behavior) can be separated from each other in a program that implements
functional programming.

Consider the following program that's designated as the ORIGINAL PROGRAM.  It
contains stand-alone enums, case classes, and methods to build a pizza.  These
enums, case classes, and methods work as they are in their stand-alone form,
as the program demonstrates.

Below the ORIGINAL PROGRAM, we rewite it 4 different ways (as PROGRAM NO. 1,
PROGRAM NO. 2, PROGRAM NO. 3, and PROGRAM NO. 4.) so it follows the Functional
Programing paradigm.  It's done 4 different ways because there is no one
correct way to make a program comply with following the Functional Programing
paradigm.

====================================================================

ORIGINAL PROGRAM
================

import CrustSize.*
import CrustType.*
import Topping.*

enum CrustSize:
  case Small, Medium, Large
enum CrustType:
  case Thin, Thick, Regular
enum Topping:
  case Cheese, Pepperoni, BlackOlives, GreenOlives, Onions

case class Pizza(crustSize: CrustSize,
                 crustType: CrustType,
                 toppings: Seq[Topping])

case class Address(street1: String,
                   street2: Option[String],
                   city: String,
                   state: String,
                   zipCode: String)

case class Customer(name: String,
                    phone: String,
                    address: Address)

case class Order(pizzas: Seq[Pizza],
                 customer: Customer)

def toppingPrice(t: Topping): Double = t match
  case Cheese | Onions => 0.5
  case Pepperoni | BlackOlives | GreenOlives => 0.75

def crustPrice(s: CrustSize, t: CrustType): Double =
  (s, t) match
    // if the crust size is small or medium,
    // the type is not important
    case (Small | Medium, _) => 0.25
    case (Large, Thin) => 0.50
    case (Large, Regular) => 0.75
    case (Large, Thick) => 1.00

def pizzaPrice(p: Pizza): Double =
  p match
    case Pizza(crustSize, crustType, toppings) =>
    val base  = 6.00
    val crust = crustPrice(p.crustSize, p.crustType)
    val tops  = p.toppings.map(toppingPrice).sum
    base + crust + tops

@main def main() =
  println("main() is called.")

  val pizza1 = Pizza(Small, Regular, Seq(Cheese, BlackOlives))
  val pizza1Price = pizzaPrice(pizza1)
  println(s"pizza1 = ${pizza1.toString}, Price = $pizza1Price")
  // PRINTS:  pizza1 = Pizza(Small,Regular,List(Cheese, BlackOlives)), Price = 7.5

====================================================================

PROGRAM NO. 1 - Implement Companion Objects
===========================================
The ORIGINAL PROGRAM above is rewritten here with these 2 changes made:

   1) The "object Topping" is created, and the method toppingPrice()
      is moved into it and renamed to price().

   2) The "object Pizza" is created, and the method pizzaPrice()
      is moved into it and renamed to price().

The method pizzaPrice() is unchanged.  It could be moved into
a new companion object named either CrustSize or CrustType.


import CrustSize.*
import CrustType.*
import Topping.*

enum CrustSize:
  case Small, Medium, Large
enum CrustType:
  case Thin, Thick, Regular
enum Topping:
  case Cheese, Pepperoni, BlackOlives, GreenOlives, Onions

case class Pizza(crustSize: CrustSize,
                 crustType: CrustType,
                 toppings: Seq[Topping])

case class Address(street1: String,
                   street2: Option[String],
                   city: String,
                   state: String,
                   zipCode: String)

case class Customer(name: String,
                    phone: String,
                    address: Address)

case class Order(pizzas: Seq[Pizza],
                 customer: Customer)

object Topping:
  def price(t: Topping): Double = t match
    case Cheese | Onions => 0.5
    case Pepperoni | BlackOlives | GreenOlives => 0.75

object Pizza:
  def price(p: Pizza): Double =
    p match
      case Pizza(crustSize, crustType, toppings) =>
        val base = 6.00
        val crust = crustPrice(p.crustSize, p.crustType)
        val tops = p.toppings.map(Topping.price).sum
        base + crust + tops

def crustPrice(s: CrustSize, t: CrustType): Double =
  (s, t) match
    // if the crust size is small or medium,
    // the type is not important
    case (Small | Medium, _) => 0.25
    case (Large, Thin) => 0.50
    case (Large, Regular) => 0.75
    case (Large, Thick) => 1.00

@main def main() =
  println("main() is called.")

  val pizza1 = Pizza(Small, Regular, Seq(Cheese, BlackOlives))
  val pizza1Price = Pizza.price(pizza1)
  println(s"pizza1 = ${pizza1.toString}, Price = $pizza1Price")
// PRINTS:  pizza1 = Pizza(Small,Regular,List(Cheese, BlackOlives)), Price = 7.5

====================================================================

PROGRAM NO. 2 - Implement Modules
=================================
PROGRAM NO.1 above is rewritten here with these 2 changes made:

   1) The "PizzaServiceInterface" is created.

   2) The "object PizzaService" is created, and the method Pizza.price()
      is moved into it from the "object Pizza".

   3) The "object Pizza" is removed.

Also, the "object PizzaService" contains 4 new methods.


import CrustSize.*
import CrustType.*
import Topping.*

enum CrustSize:
  case Small, Medium, Large
enum CrustType:
  case Thin, Thick, Regular
enum Topping:
  case Cheese, Pepperoni, BlackOlives, GreenOlives, Onions

case class Pizza(crustSize: CrustSize,
                 crustType: CrustType,
                 toppings: Seq[Topping])

case class Address(street1: String,
                   street2: Option[String],
                   city: String,
                   state: String,
                   zipCode: String)

case class Customer(name: String,
                    phone: String,
                    address: Address)

case class Order(pizzas: Seq[Pizza],
                 customer: Customer)

trait PizzaServiceInterface:
  def price(p: Pizza): Double
  def addTopping(p: Pizza, t: Topping): Pizza
  def removeAllToppings(p: Pizza): Pizza
  def updateCrustSize(p: Pizza, cs: CrustSize): Pizza
  def updateCrustType(p: Pizza, ct: CrustType): Pizza

object PizzaService extends PizzaServiceInterface:
  def price(p: Pizza): Double =
    p match
      case Pizza(crustSize, crustType, toppings) =>
        val base = 6.00
        val crust = crustPrice(p.crustSize, p.crustType)
        val tops = p.toppings.map(Topping.price).sum
        base + crust + tops
  def addTopping(p: Pizza, t: Topping): Pizza =
    p.copy(toppings = p.toppings :+ t)
  def removeAllToppings(p: Pizza): Pizza =
    p.copy(toppings = Seq.empty)
  def updateCrustSize(p: Pizza, cs: CrustSize): Pizza =
    p.copy(crustSize = cs)
  def updateCrustType(p: Pizza, ct: CrustType): Pizza =
    p.copy(crustType = ct)
// The following line isn't required, but makes it easier
// to see where "object PizzaService" ends.
end PizzaService

object Topping:
  def price(t: Topping): Double = t match
    case Cheese | Onions => 0.5
    case Pepperoni | BlackOlives | GreenOlives => 0.75

def crustPrice(s: CrustSize, t: CrustType): Double =
  (s, t) match
    // if the crust size is small or medium,
    // the type is not important
    case (Small | Medium, _) => 0.25
    case (Large, Thin) => 0.50
    case (Large, Regular) => 0.75
    case (Large, Thick) => 1.00

@main def main() =
  println("main() is called.")

  val pizza1 = Pizza(Small, Regular, Seq(Cheese, BlackOlives))
  val pizza1Price = PizzaService.price(pizza1)
  println(s"pizza1 = ${pizza1.toString}, Price = $pizza1Price")
// PRINTS:  pizza1 = Pizza(Small,Regular,List(Cheese, BlackOlives)), Price = 7.5

====================================================================
PROGRAM NO. 3
=============

====================================================================

PROGRAM NO. 4
=============
