CURRYING
========
Before reading this web page, read the web page titled:
METHODS VS. FUNCTIONS

NOTE:  This web page coveres the topic of partially-applied functions.  Partially-applied
       functions are NOT covered the "Methods_and_Functions" web page.

Most Scala methods have a single argument list, which can contain zero, one, or
multiple arguments.  Scala also allows methods to have multiple argument lists,
where each argument list can contain zero, one, or multiple arguments.  The
following program demonstrates this.

NOTE:  In this section, the words "method" and "function" are used interchangably
       because their differences aren't in this context aren't that important.
       To understand the difference between a Scala method and a Scala function
       see the web page titled:  Methods_and_Functions

----------------------------------------------------------------------------------------------
// METHODS CONTAINING SINGLE-ARGUMENT LISTS  *****************************
def method_1(number:Int):Int = number + 1
def method_2(number1:Int, number2:Int, number3:Int):Int = number1 + number2 + number3 + 1

// METHODS CONTAINING MULTIPLE-ARGUMENT LISTS  ***************************
def method_3(number1:Int)(number2:Int, number3:Int):Int = number1 + number2 + number3 + 1
def method_4(number1:Int, number2:Int)(number3:Int):Int = number1 + number2 + number3 + 1

@main def main() =
  // CALL THE SINGLE-ARGUMENT LIST METHODS.
  var intResult = method_1(123)
  println(s"1) intResult = $intResult") // PRINTS: 1) intResult = 124
  intResult = method_2(111, 222, 333)
  println(s"2) intResult = $intResult") // PRINTS: 2) intResult = 667

  // CALL THE MULTIPLE-ARGUMENT LIST METHODS.
  intResult = method_3(111)(222, 333)
  println(s"3) intResult = $intResult") // PRINTS: 3) intResult = 667
  intResult = method_4(222, 333)(111)
  println(s"4) intResult = $intResult") // PRINTS: 4) intResult = 667
end main
----------------------------------------------------------------------------------------------

In the above program it appears that methods having multiple argument lists behave no
differently than methods containing a single argument list.  That is, a method can
access any argument, whether all arguments are contained in a single argument list,
or the arguments are contained across multiple argument lists.

Multiple argument lists are required when a method implements a process known as currying.

When a method contains multiple argument lists, and you invoke that method by passing it
all its argument lists at once (as was done in the above program), that method returns
a final value, and is NOT curried.

FIX -->  Doesn't appear as it's curried, but internally, it is currued.

When a method contains multiple argument lists, and you invoke that method by passing it
fewer than all of its argument lists, that method returns a function, and IS curried.
The next Scala program shown further below demonstrates this.

----------------------------------------------------------------------------------------------
@main def main() =
  // A method/function that has multiple argument lists is a curried
  // method/function.  So this add method is a curried method.
  def add(x:Int)(y:Int)(z:Int):Int = x + y + z

  // When a curried method/function is supplied with all its arguments at once
  // (as shown here), it processes all of them.  This makes it "fully applied."
  // A fully-applied method/function returns a final result, not a function.
  var intResult:Int = add(77)(12)(11)   // 77 + 12 + 11 = 100
  println(s"1) intResult = $intResult") // PRINTS: 1) intResult = 100

  // When a curried method/function has processed at least one of its
  // argument lists, but not all of its argument lists, it returns
  // a partially-applied function, as demonstrated here.
  var partiallyAppliedFunc_1:Int=>(Int => Int) = add(77)
  var partiallyAppliedFunc_2:Int=>Int          = partiallyAppliedFunc_1(12)
  intResult = partiallyAppliedFunc_2(11)
  println(s"2) intResult = $intResult") // PRINTS: 2) intResult = 100

  // The above example calls the add method 3 separate times, each time
  // supplying it with a single argument list, until it becomes fully applied.
  // The following code demonstrates the add method becomea fully applied
  // by calling only twice.  The first time with 1 argument list; the second
  // time with 2 argument lists.
  partiallyAppliedFunc_1 = add(77)
  intResult = partiallyAppliedFunc_1(12)(11)
  println(s"3) intResult = $intResult") // PRINTS: 3) intResult = 100
  
  // This also works...
  partiallyAppliedFunc_2 = add(77)(12)
  intResult = partiallyAppliedFunc_2(11)
  println(s"4) intResult = $intResult") // PRINTS: 4) intResult = 100


  // curriedSum_1 and curriedSum_2 below are both functions that are
  // identical to each other, and identical to sum method defined above.
  // curriedSum_1 is written with parentheses () and braces {} making
  // it easier to read.
  val curriedSum_1:Int =>   Int => Int   =   x =>  y => x + y
  val curriedSum_2:(Int => (Int => Int)) = { x => (y => x + y) } // parens () and braces {} makes it easier to read.
  intResult = curriedSum_1(88)(12)
  println(s"curriedSum_0(88)(12) = $intResult") // PRINTS: curriedSum_0(88)(12) = 100

  intResult = curriedSum_2(88)(12)
  println(s"curriedSum_1(88)(12) = $intResult") // PRINTS: curriedSum_1(88)(12) = 100

//  val curriedSum_1:Int =>   Int => Int   =   x =>  y => x + y
//  val curriedSum_2:(Int => (Int => Int)) = { x => (y => x + y) } // parens () and braces {} makes it easier to read.

end main
----------------------------------------------------------------------------------------------



CURRYING DEFINITION 1
=====================
Currying is the process of converting a function having multiple argument lists
into a sequence of functions that accepts only one argument list.  Each function,
when invoked, returns another function that consumes the next argument list.
The sequence of function calls terminates when the last function in the sequence
returns a value, instead of a function.  Any function that returns a function
having an argument list is a curried function.

CURRYING DEFINITION 2
=====================
Currying transforms a method that has multiple argument lists into a chain of functions.
Where each function in the chain gets passed a single argument list, and returns
a function that accepts a single argument list.  When a curried function is finally
called with its last argument list, the curried function becomes fully applied, and
returns not a function, but a final value.  Any function that returns a function
having an argument list is a curried function.

HOW CURRYING WORKS
==================
The first time the method executes it processes only its RIGHT-MOST argument list.
When that RIGHT-MOST argument list is processed (consumed), the method executes
again, processing its remaining RIGHT-MOST argument list.  This process repeats
until the method's LEFT-MOST argument list remains.  When the method's LEFT-MOST
argument list has been consumed (processed), the method returns a final value
and terminates.

Whenever a Scala curried function is invoked, that function becomes
either a partially-applied function, or a fully-applied function.

PARTIALLY-APPLIED FUNCTION - Invoking a curried function with fewer than all its argument
                             lists will return a function (not a value); which means the
                             function is partially applied.

FULLY-APPLIED FUNCTION - When a curried function returns a value (a List, Array, Int, etc.),
                         instead of a function, that function becomes fully applied.



----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
