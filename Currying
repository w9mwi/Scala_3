
CURRYING
========

NOTE:  This web page coveres the topic of partially-applied functions.  Partially-applied
       functions are NOT covered the "Methods_and_Functions" web page.

Most Scala methods have a single argument list, which can contain zero, one, or
multiple arguments.  Scala also allows methods to have multiple argument lists,
where each argument list can contain zero, one, or multiple arguments.  The
following program demonstrates this.

----------------------------------------------------------------------------------------------
// METHODS CONTAINING SINGLE-ARGUMENT LISTS  *****************************
def method_1(number:Int):Int = number + 1
def method_2(number1:Int, number2:Int, number3:Int):Int = number1 + number2 + number3 + 1

// METHODS CONTAINING MULTIPLE-ARGUMENT LISTS  ***************************
def method_3(number1:Int)(number2:Int, number3:Int):Int = number1 + number2 + number3 + 1
def method_4(number1:Int, number2:Int)(number3:Int):Int = number1 + number2 + number3 + 1

@main def main() =
  // CALL THE SINGLE-ARGUMENT LIST METHODS.
  var intResult = method_1(123)
  println(s"1) intResult = $intResult") // PRINTS: 1) intResult = 124
  intResult = method_2(111, 222, 333)
  println(s"2) intResult = $intResult") // PRINTS: 2) intResult = 667

  // CALL THE MULTIPLE-ARGUMENT LIST METHODS.
  intResult = method_3(111)(222, 333)
  println(s"3) intResult = $intResult") // PRINTS: 3) intResult = 667
  intResult = method_4(222, 333)(111)
  println(s"4) intResult = $intResult") // PRINTS: 4) intResult = 667
end main
----------------------------------------------------------------------------------------------

In the above program it appears that methods having multiple argument lists behave no
differently than methods containing a single argument list.  That is, a method can
access any argument, whether all arguments are contained in a single argument list,
or the arguments are contained across multiple argument lists.

Multiple argument lists are required when a method implements a process known as currying.

CURRYING DEFINITION 1
=====================
Currying is the process of converting a function having multiple argument lists
into a sequence of functions that accepts only one argument list.  Each function,
when invoked, returns another function that consumes the next argument list.
The sequence of function calls terminates when the last function in the sequence
returns a value, instead of a function.  Any function that returns a function
having an argument list is a curried function.

CURRYING DEFINITION 2
=====================
Currying transforms a method that has multiple argument lists into a chain of functions.
Where each function in the chain gets passed a single argument list, and returns
a function that accepts a single argument list.  When a curried function is finally
called with its last argument list, the curried function becomes fully applied, and
returns not a function, but a final value.  Any function that returns a function
having an argument list is a curried function.

When a method containing multiple argument lists implements currying, it does the following:

1) The left-most argument list is consumed first.


consumes the
right-most argument list first, and working right to left, it consumes the
left-most argument last.


Whenever a Scala curried function is invoked, that function becomes
either a partially-applied function, or a fully-applied function.

PARTIALLY-APPLIED FUNCTION - Invoking a curried function with fewer than all its argument
                             lists will return a function (not a value); which means the
                             function is partially applied.

FULLY-APPLIED FUNCTION - When a curried function returns a value (a List, Array, Int, etc.),
                         instead of a function, that function becomes fully applied.



----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
