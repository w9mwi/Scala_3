CURRYING
========
On this web page the words "method" and "function" are used interchangably
because their differences aren't important regarding the topic of currying.
The differences between a Scala method and a Scala function are explained
on the web page titled:  Methods_and_Functions

CURRYING DEFINITION - Currying transforms a method that has multiple argument lists
                      into a chain of functions.  Where each function in the chain
                      gets passed an argument list, and returns a function that
                      accepts an argument list.  When a curried function is supplied
                      with the last of its multiple argument lists, it becomes fully
                      applied, and returns not a function, but a final value.  Any
                      function that returns a function having an argument list is
                      a curried function.

                      A curried function is also a recursive function.  Because when
                      it returns a function, the function returned is another call
                      to itself.

PARTIALLY-APPLIED FUNCTION - Invoking a curried function with fewer than all its argument
                             lists will return a function (not a final value); which makes
                             it a partially-applied function.

FULLY-APPLIED FUNCTION - When a curried function processes all of its argument lists it
                         returns a final value (i.e., Int, List, Array, Float, etc.)
                         instead of a function, and becomes a fully-applied function.

Most Scala methods have a single argument list, which can contain zero, one, or
multiple arguments.  Scala also allows methods to have multiple argument lists.
The following program demonstrates this.

WARNING: When a method/function definition contains multiple argument lists,
         and one those argument lists contains the Scala keyword "implicit",
         that method/function is NOT a curried function.

----------------------------------------------------------------------------------------------
// METHODS CONTAINING SINGLE-ARGUMENT LISTS  *****************************
def method_1(number:Int):Int = number + 1
def method_2(number1:Int, number2:Int, number3:Int):Int = number1 + number2 + number3 + 1

// METHODS CONTAINING MULTIPLE-ARGUMENT LISTS  ***************************
def method_3(number1:Int)(number2:Int, number3:Int):Int = number1 + number2 + number3 + 1
def method_4(number1:Int, number2:Int)(number3:Int):Int = number1 + number2 + number3 + 1

@main def main() =
  // CALL THE SINGLE-ARGUMENT LIST METHODS.
  var intResult = method_1(123)
  println(s"1) intResult = $intResult") // PRINTS: 1) intResult = 124
  intResult = method_2(111, 222, 333)
  println(s"2) intResult = $intResult") // PRINTS: 2) intResult = 667

  // CALL THE MULTIPLE-ARGUMENT LIST METHODS.
  intResult = method_3(111)(222, 333)
  println(s"3) intResult = $intResult") // PRINTS: 3) intResult = 667
  intResult = method_4(222, 333)(111)
  println(s"4) intResult = $intResult") // PRINTS: 4) intResult = 667
end main
----------------------------------------------------------------------------------------------

In the above program it appears that a method having multiple argument lists behaves no
differently than a method containing a single argument list.  That's true only when you
invoke the method with all of its argument lists in a single call, as was done in the
above program.

When a method/function has multiple argument lists, it can be invoked by supplying it
with fewer than all of its argument lists.  When that happens the method processes
only the argument list(s) supplied, and it returns a function, instead of a final result.

You can then invoke the returned function with any number of argument lists, until you
have supplied all of the method's argument lists.  Only when you have supplied all of
the method's argument lists will a final result be returned, instead of a function.

A method/function that has multiple argument lists is known as a CURRIED METHOD/FUNCTION.
When it's invoked with fewer than all of its argument lists, it returns not a final value,
but a function; which makes it a PARTIALLY-APPLIED FUNCTION.  Once it's supplied with
all of its argument lists, it returns not a function, but a final value; which makes
it FULLY-APPLIED.  The following program demonstrates this.  Read in-line comments
for details

----------------------------------------------------------------------------------------------
@main def main() =
  // A method/function that has multiple argument lists is a curried
  // method/function.  So this add method is a curried method.
  def add(x:Int)(y:Int)(z:Int):Int = x + y + z

  // When a curried method/function is supplied with all its argument lists
  // at once (as shown here), it processes all of them.  This makes it a
  // fully-applied function, which returns a final result, not a function.
  var intResult:Int = add(77)(12)(11)   // 77 + 12 + 11 = 100
  println(s"1) intResult = $intResult") // PRINTS: 1) intResult = 100

  // When a curried method/function has processed at least one of its
  // argument lists, but not all of its argument lists, it returns
  // a partially-applied function, as demonstrated here.
  var partiallyAppliedFunc_1:Int=>(Int => Int) = add(77)
  var partiallyAppliedFunc_2:Int=>Int          = partiallyAppliedFunc_1(12)
  intResult = partiallyAppliedFunc_2(11)
  println(s"2) intResult = $intResult") // PRINTS: 2) intResult = 100

  // The above example calls the add method 3 separate times, each time
  // supplying it with a single argument list, until it becomes fully applied.
  // The following code demonstrates the add method becomes fully applied
  // by calling only twice.  The first time with 1 argument list; the second
  // time with 2 argument lists.
  partiallyAppliedFunc_1 = add(77)
  intResult = partiallyAppliedFunc_1(12)(11)
  println(s"3) intResult = $intResult") // PRINTS: 3) intResult = 100

  // This also works...
  partiallyAppliedFunc_2 = add(12)(11)
  intResult = partiallyAppliedFunc_2(77)
  println(s"4) intResult = $intResult") // PRINTS: 4) intResult = 100

  // On the following line of code, the Scala compiler automatically
  // transforms the add method into a function by performing an
  // "eta expansion" on it, and assigns it to the var curriedSum.
  // We know curriedSum is a function (not a method) because its
  // data type contains the rocket symbol (=>).  The parenthesis ()
  // used on the following line are added to make it more readable
  // and can be removed.
  var curriedSum:Int => (Int => (Int => Int)) = add

  // The curriedSum function works exactly like the add method above.
  partiallyAppliedFunc_1 = curriedSum(77)
  intResult = partiallyAppliedFunc_1(12)(11)
  println(s"5) intResult = $intResult") // PRINTS: 5) intResult = 100

  // Here we write our own function and assign it to the var curriedSum.
  // It's identical to the curriedSum function above, which was obtained
  // by transforming the add method into a function.  The parenthesis()
  // used on the following line are added to make it more readable
  // and can be removed.
  curriedSum = (x => (y => (z => x + y + z)))
  partiallyAppliedFunc_2 = add(12)(11)
  intResult = partiallyAppliedFunc_2(77)
  println(s"6) intResult = $intResult") // PRINTS: 6) intResult = 100
end main
----------------------------------------------------------------------------------------------

In most cases a curried method/function is written with multiple argument
lists.  However, it's possible for a curried method/function to have only
one argument list.  The following 2 programs demonstrates this.

----------------------------------------------------------------------------------------------
@main def main() =
  // subtractCurried_1 is a curried method defined with 2 argument lists.
  def subtractCurried_1(x:Int)(y:Int):Int = { x - y }

  // subtractCurried_2 is defined with 1 argument list, but
  // it's a curried function because it returns a function
  // that accepts a single argument list.
  def subtractCurried_2(x:Int):(Int => Int) = { (y:Int) => x - y }

  // Invoke the subtractCurried_1 method. ******************************************
  var result:Int = subtractCurried_1(1)(2) // Invoke as a fully-applied function.
  println(s"1) result = $result") // PRINTS: 1) result = -1

  var func:(Int=>Int) = subtractCurried_1(1) // Invoke as a partially-applied function.
  result = func(2) // Calling func(2) makes it fully applied.
  println(s"2) result = $result") // PRINTS: 2) result = -1

  // Invoke the subtractCurried_2 method. ******************************************
  result = subtractCurried_2(1)(2) // Invoke as a fully-applied function.
  println(s"3) result = $result") // PRINTS: 3) result = -1

  func = subtractCurried_2(1) // Invoke as a partially-applied function.
  result = func(2) // Calling func(2) makes it fully applied.
  println(s"4) result = $result") // PRINTS: 4) result = -1

  func = subtractCurried_2(_)(2) // Invoke as a partially-applied function.
  result = func(1) // Calling func(1) makes it fully applied.
  println(s"5) result = $result") // PRINTS: 5) result = -1
end main

----------------------------------------------------------------------------------------------

@main def main() =
  // Although the following 2 functions are written with only
  // one argument list, they are both curried functions because
  // they return a function that accepts a single argument list.
  val plus5Func:(Double=>Double)  = { (x:Double) => x+5.0D }
  val squareFunc:(Double=>Double) = { (x:Double) => x*x }

  // Although the funcOfGunc method defined below is written with
  // only one argument list, it is a curried function because
  // it returns a function that accepts a single argument list.
  //
  // The following line of code can be rewritten as this:
  // def funcOfGunc[A](func:(A=>A), gunc:(A=>A)):(A=>A) = { x=>func(gunc(x)) }
  // Because A, B, and C all have the same data type.
  def funcOfGunc[A,B,C](func:(B=>C), gunc:(A=>B)):(A=>C) = { x=>func(gunc(x)) }

  // SECTION 1) ************************************************************
  // This demonstrates that funcOfGunc(plus5Func, squareFunc) can
  // be invoked 3 different ways to obtain the same result.
  //
  var result:Double = funcOfGunc(plus5Func, squareFunc)(7.0D)
  println("1) result = " + result) // PRINTS: 1) result = 54.0
  var func:Double=>Double = funcOfGunc(plus5Func, squareFunc)
  result = func(7.0D)
  println("2) result = " + result) // PRINTS: 2) result = 54.0
  func = funcOfGunc(plus5Func, squareFunc)(_)
  result = func(7.0D)
  println("3) result = " + result) // PRINTS: 3) result = 54.0

  // SECTION 2) ************************************************************
  // This section is identical to SECTION 1) above, except that it
  // swaps the order of the 2 arguments passed to funcOfGunc.
  //
  // This demonstrates that funcOfGunc(squareFunc, plus5Func) can
  // be invoked 3 different ways to obtain the same result.
  result = funcOfGunc(squareFunc, plus5Func)(7.0D)
  println("4) result = " + result) // PRINTS: 4) result = 144.0
  func = funcOfGunc(squareFunc, plus5Func)
  result = func(7.0D)
  println("5) result = " + result) // PRINTS: 5) result = 144.0
  func = funcOfGunc(squareFunc, plus5Func)(_)
  result = func(7.0D)
  println("6) result = " + result) // PRINTS: 6) result = 144.0
end main
----------------------------------------------------------------------------------------------

The following program demonstrates a peculiar way of using
a curried function.  Read in-line comments for details.

/*********************************************************************
* THIS METHOD IS DIFFICULT TO UNDERSTAND!  HERE'S THE EXPLANATION:
*
* PART 1)
* Notice that this wrapWithDiv method does nothing more than call
* the wrap method with 2 of its 3 argument lists, at which point
* the wrap method becomes partially applied; therefore, returning
* a function.
*
* PART 2)
* The returned function is the wrap function.  Since two of its
* argument lists are now processed, the returned wrap function
* accepts only one argument list, which (when supplied) will
* fulfill the last of its 3 argument lists.
*
* PART 3)
* The call to wrapWithDiv("ABC") in the main() function below
* passes to the returned wrap function the string "ABC", as
* its third (and final) argument list.  This makes the wrap
* function fully applied, so it returns a string value.
* 
* PARTS 1, 2, and 3 above all happen when this single method
* is called in the main() function below:  wrapWithDiv("ABC")
* 
* NOTE: To have the wrap method (called below) return the correct
*       string result, the empty argument list (_) must appear
*       between the 2 supplied argument lists.
*  
*********************************************************************/
def wrapWithDiv:(String => String) = wrap("<div>")(_)("</div>")

/*********************************************************************
* This wrap function is a curried function because it has 3 argument
* lists.  It will return a partially-applied function the first two
* times it's invoked with a single argument list.  Or, it will return
* a partially-applied function when it's supplied with two argument
* lists in a single call.  When its third (final) argument list is
* supplied, it becomes fully-applied and returns a String result.
*********************************************************************/
def wrap(prefix:String)(html:String)(suffix:String) = prefix + html + suffix

@main def main() =
  println(wrapWithDiv("ABC"))  // PRINTS: <div>ABC</div>
end main

----------------------------------------------------------------------------------------------

SCALA FOLD FUNCTIONS
====================
The following Scala collections can implement the fold, foldRight, and foldLeft functions.

Sequence Collections: Array          Set Collections: HashSet
                      ArrayBuffer                     LinkedHashSet
                      List                            Set
                      ListBuffer                      TreeSet
                      Queue
                      Stack
                      Vector

Map Collections: HashMap              Other Collections: Either
                 LinkedHashMap                           LazyList
                 Map                                     Option
                 TreeMap                                 BitSet

These fold, foldRight, and foldLeft functions have 2 argument lists,
which makes them curried functions.  Recall that a curried function
is also a recursive function because they return a function that
calls itself.

The first argument list of these fold functions gets passed an
"initial value", or "start value."  The second argument list gets
passed a function that performs an operation on the intitial value,
plus all elements contained in the collection.  The function passed
to these fold functions is frequently short and simple, so it's
usually an anonymous function.

When the fold and foldRight functions operate on an identical collection,
they frequently return an identical result.  Leading one to ask:
What's the difference between the fold and foldRight functions?

foldRight always processes the collection's elements from right to left;
which means it processes the last element of the collection first, and
its first element last.

fold may process the collection's elements in any order, which can be
more efficient for some operations, like parallel processing.  When
the order in which elements of a collection are processed DO MATTER
(i.e., mathematical subtraction) then DON'T use the fold function!

When the order in which elements of a collection are processed DON'T
MATTER, (i.e., mathematical addition) then it's OK to use the
fold function, as it may be more efficient.

The following program demostrates the use of the fold, foldLeft,
and foldRight functions.

----------------------------------------------------------------------------------------------

@main def main() =
  // SECTION 1) *************************************************************
  // This section demonstrates that when a collection is EMPTY, the fold,
  // foldLeft, and foldRight functions return only the "initial value",
  // which is the value passed to the function's first argument list.
  var intList:List[Int] = List[Int]()        // An EMPTY List[Int].
  var intResult: Int = intList.fold(77)(_-_) // _-_ is an anonymous function
  println(s"1) intResult = $intResult")      // PRINTS: 1) intResult = 77
  intResult = intList.foldLeft(77)(_-_)      // _-_ is an anonymous function
  println(s"2) intResult = $intResult")      // PRINTS: 2) intResult = 77
  intResult = intList.foldRight(77)(_-_)     // _-_ is an anonymous function
  println(s"3) intResult = $intResult")      // PRINTS: 3) intResult = 77

  // SECTION 2) *************************************************************
  intList = List[Int](7, 6, 5, 4, 3, 2, 1)
  // Given identical inputs, the fold and foldLeft functions often return
  // the same result.  However, the fold function doesn't guarantee the
  // order in which a collection's elements are processed; therefore,
  // NEVER use the fold function when processing order matters!
  intResult = intList.fold(77)(_-_)      // _-_ is an anonymous function
  println(s"4) intResult = $intResult")  // PRINTS: 4) intResult = 49

  // The math operation performed by foldLeft is:
  // 77−7−6−5−4−3−2−1 = 49
  intResult = intList.foldLeft(77)(_-_)  // _-_ is an anonymous function
  println(s"5) intResult = $intResult")  // PRINTS: 5) intResult = 49

  // The math operation performed by foldRight is:
  // (1-(2-(3-(4-(5-(6-7))))))-77 = -73
  intResult = intList.foldRight(77)(_-_) // _-_ is an anonymous function
  println(s"6) intResult = $intResult")  // PRINTS: 6) intResult = -73

  // SECTION 3) *************************************************************
  // This section is identical to SECTION 2) above except for this one
  // difference; the anonymous function passed to the 3 fold functions is:
  // (x,y)=>x-y
  // This anonymous function is functionally equivalent the _-_ anonymous
  // function used in SECTION 2) above.
  intResult = intList.fold(77)((x,y)=>x-y)      // (x,y)=>x-y is an anonymous function
  println(s"7) intResult = $intResult")         // PRINTS: 7) intResult = 49
  intResult = intList.foldLeft(77)((x,y)=>x-y)  // (x,y)=>x-y is an anonymous function
  println(s"8) intResult = $intResult")         // PRINTS: 8) intResult = 49
  intResult = intList.foldRight(77)((x,y)=>x-y) // (x,y)=>x-y is an anonymous function
  println(s"9) intResult = $intResult")         // PRINTS: 9) intResult = -73

  // SECTION 4) *************************************************************
  // This sections demonstrates how to count the number of characters in the
  // val wordList; using the foldLeft and foldRight functions.
  val wordList:List[String] = List[String]("How", "many", "characters", "are", "in", "this", "wordList?")

  val foldLeftFunc:(Int,String)=>Int = (count:Int, word:String) => count + word.length
  intResult = wordList.foldLeft(0)(foldLeftFunc)
  println(s"10) intResult = $intResult")         // PRINTS: 10) intResult = 35
  intResult = wordList.foldLeft(0)(_ + _.length) // This anonymous function is equivalent to foldLeftFunc.
  println(s"11) intResult = $intResult")         // PRINTS: 11) intResult = 35

  // foldRightFunc below is equivalent to foldLeftFunc above, except the
  // order of its argument list is swapped, so it'll work with foldRight.
  // The anonymous function below must also be written differently than
  // the one above, to make it work with foldRight.
  val foldRightFunc:(String,Int)=>Int = (word:String, count:Int) => count + word.length
  intResult = wordList.foldRight(0)(foldRightFunc)
  println(s"12) intResult = $intResult")          // PRINTS: 12) intResult = 35
  intResult = wordList.foldRight(0)(_.length + _) // This anonymous function is equivalent to foldRightFunc.
  println(s"13) intResult = $intResult")          // PRINTS: 13) intResult = 35

  // SECTION 5) *************************************************************
  // This section demonstrates how to concatenate all strings contained in a
  // List[String] using foldLeft and foldRight; and how their results differ.
  //
  // strConcatMethod and strConcatFunc defined here are functionally equivalent.
  def strConcatMethod(str1:String, str2:String):String = str1.concat("-").concat(str2)
  val strConcatFunc:(str1:String, str2:String)=>String =
      (str1:String, str2:String) => str1.concat("-").concat(str2)

  // Perform a string concat using both foldLeft and foldRight;
  // passing to them strConcatMethod as an argument.
  val strList:List[String] = List[String]("ABC", "DEF", "GHI", "JKL", "MNO")
  var strResult:String = strList.foldLeft("BEGIN")(strConcatMethod)
  println(s"14) strResult = $strResult") // PRINTS: 14) strResult = BEGIN-ABC-DEF-GHI-JKL-MNO
  strResult = strList.foldRight("END")(strConcatMethod)
  println(s"15) strResult = $strResult") // PRINTS: 15) strResult = ABC-DEF-GHI-JKL-MNO-END

  // Perform a string concat using both foldLeft and foldRight;
  // passing to them strConcatFunc as an argument.
  strResult = strList.foldLeft("BEGIN")(strConcatFunc)
  println(s"16) strResult = $strResult") // PRINTS: 16) strResult = BEGIN-ABC-DEF-GHI-JKL-MNO
  strResult = strList.foldRight("END")(strConcatFunc)
  println(s"17) strResult = $strResult") // PRINTS: 17) strResult = ABC-DEF-GHI-JKL-MNO-END
end main

----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
