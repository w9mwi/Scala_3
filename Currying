
CURRYING
========

NOTE:  This web page coveres the topic of partially-applied functions.  Partially-applied
       functions are NOT covered the "Methods_and_Functions" web page.

Most Scala methods have a single argument list, which can contain zero, one, or
multiple arguments.  Scala also allows methods to have multiple argument lists,
where each argument list can contain zero, one, or multiple arguments.  The
following program demonstrates this.

NOTE:  In this section, the words "method" and "function" are used interchangably
       because their differences aren't in this context aren't that important.
       To understand the difference between a Scala method and a Scala function
       see the web page titled:  Methods_and_Functions

----------------------------------------------------------------------------------------------
// METHODS CONTAINING SINGLE-ARGUMENT LISTS  *****************************
def method_1(number:Int):Int = number + 1
def method_2(number1:Int, number2:Int, number3:Int):Int = number1 + number2 + number3 + 1

// METHODS CONTAINING MULTIPLE-ARGUMENT LISTS  ***************************
def method_3(number1:Int)(number2:Int, number3:Int):Int = number1 + number2 + number3 + 1
def method_4(number1:Int, number2:Int)(number3:Int):Int = number1 + number2 + number3 + 1

@main def main() =
  // CALL THE SINGLE-ARGUMENT LIST METHODS.
  var intResult = method_1(123)
  println(s"1) intResult = $intResult") // PRINTS: 1) intResult = 124
  intResult = method_2(111, 222, 333)
  println(s"2) intResult = $intResult") // PRINTS: 2) intResult = 667

  // CALL THE MULTIPLE-ARGUMENT LIST METHODS.
  intResult = method_3(111)(222, 333)
  println(s"3) intResult = $intResult") // PRINTS: 3) intResult = 667
  intResult = method_4(222, 333)(111)
  println(s"4) intResult = $intResult") // PRINTS: 4) intResult = 667
end main
----------------------------------------------------------------------------------------------

In the above program it appears that methods having multiple argument lists behave no
differently than methods containing a single argument list.  That is, a method can
access any argument, whether all arguments are contained in a single argument list,
or the arguments are contained across multiple argument lists.

Multiple argument lists are required when a method implements a process known as currying.

When a method contains multiple argument lists, and you invoke that method by passing it
all its argument lists at once (as was done in the above program), that method returns
a final value, and is NOT curried.

When a method contains multiple argument lists, and you invoke that method by passing it
fewer than all of its argument lists, that method returns a function, and IS curried.
The next Scala program shown further below demonstrates this.

----------------------------------------------------------------------------------------------
@main def main() =
  // This add method is a curried function because it has 2 argument lists.
  def add(x:Int)(y:Int):Int = x + y

  // When the add method is invoked by supplying both of its argument lists
  // at once, it becomes "fully applied" and returns the final result.
  var result:Int = add(88)(12)
  println(s"add(88)(12) = $result") // PRINTS: func(12) = 100

  // A curried function becomes "partially applied" by invoking it with fewer
  // than all of its argument lists.  When a curried function is "partially
  // applied", it returns a function, not a value.
  //
  // The following 3 lines of code have identical behavior; only the syntax is
  // different.  The way the code is written, each of the following 3 lines
  // invokes the add method for "THE FIRST TIME", because only its LEFT-MOST
  // argument list is supplied.  When a curried method has processed fewer
  // than all of its argument lists, it is "partially applied."
  var func:(Int => Int) = add(88) // This line makes the add method partially-applied.
  func = add(88)_                 // This line makes the add method partially-applied.
  func = add(88)(_)               // This line makes the add method partially-applied.

  // To make the add method "fully applied", the function returned
  // above must be invoked with its final argument list, like this:
  result = func(12)
  println(s"func(12) = $result") // PRINTS: func(12) = 100

  // The following code creates two curried functions, both of which
  // are identical to each other, and identical to sum method above.
  val curriedSum_0: Int =>  Int => Int   =   x =>  y => x + y
  val curriedSum_1:(Int => (Int => Int)) = { x => (y => x + y) } // parens () and braces {} makes it easier to read.

  result = curriedSum_0(88)(12)
  println(s"curriedSum_0(88)(12) = $result") // PRINTS: curriedSum_0(88)(12) = 100

  result = curriedSum_1(88)(12)
  println(s"curriedSum_1(88)(12) = $result") // PRINTS: curriedSum_1(88)(12) = 100
end main
----------------------------------------------------------------------------------------------



CURRYING DEFINITION 1
=====================
Currying is the process of converting a function having multiple argument lists
into a sequence of functions that accepts only one argument list.  Each function,
when invoked, returns another function that consumes the next argument list.
The sequence of function calls terminates when the last function in the sequence
returns a value, instead of a function.  Any function that returns a function
having an argument list is a curried function.

CURRYING DEFINITION 2
=====================
Currying transforms a method that has multiple argument lists into a chain of functions.
Where each function in the chain gets passed a single argument list, and returns
a function that accepts a single argument list.  When a curried function is finally
called with its last argument list, the curried function becomes fully applied, and
returns not a function, but a final value.  Any function that returns a function
having an argument list is a curried function.

HOW CURRYING WORKS
==================
The first time the method executes it processes only its RIGHT-MOST argument list.
When that RIGHT-MOST argument list is processed (consumed), the method executes
again, processing its remaining RIGHT-MOST argument list.  This process repeats
until the method's LEFT-MOST argument list remains.  When the method's LEFT-MOST
argument list has been consumed (processed), the method returns a final value
and terminates.

Whenever a Scala curried function is invoked, that function becomes
either a partially-applied function, or a fully-applied function.

PARTIALLY-APPLIED FUNCTION - Invoking a curried function with fewer than all its argument
                             lists will return a function (not a value); which means the
                             function is partially applied.

FULLY-APPLIED FUNCTION - When a curried function returns a value (a List, Array, Int, etc.),
                         instead of a function, that function becomes fully applied.



----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
