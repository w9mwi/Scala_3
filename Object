Both a Scala class and a Scala object are used to represent some "thing",
or some "entity".  When there can exist more than one of these things
(i.e., people, houses, automobiles), a Scala class must be used.

When only one of something can exist (i.e., planet Earth, Empire
State Building), a Scala object should be used.  In other words,
a Scala object should always represent a singleton.

A Scala object cannot contain arguments and cannot be instantiated.
Once you define an object, it's available for use without having
to instantiate it.  A Scala object is "lazy", which means it gets
created the first time it's referenced.  An object can extend
a class or a trait, but a class cannot extend an object.

COMPANION OBJECT
================
When both a Scala object and a Scala class (or case class) have identical
names, and they're both contained in the same file, the object is called
a "companion object" to the class.  Conversely, the class is called a
"companion class" to the object.

A companion object should be used to contain methods and values that arenâ€™t
specific to the instance of the companion class.  In other words, methods
and values that never change should be placed in a companion object.  Doing
so will prevent duplicate copies getting created every time a new instance
of the class is generated.  This will save both memory and execution time
because only one instance of these methods and values get created when they
reside in a companion object.

The following program demonstrates an example of this.  The method named
print() is used to print the "name" and "age" values contained in the Person
class.  Instead of defining that method in the Print class, the print()
method is placed in the Person companion object.

NOTE: In the following example there is also a print() method in the Person class
      class, which invokes the print() method in the companion object.  Therefore,
      a new print() method does get created for every instance of a Person class.
      However, the Person class print() method is just a call to the print()
      method in the Print object.  In this example there's not much savings in
      execution time or memory space because the print() method in the Person
      object contains only one line of code.  However, if that method contained
      multiple lines of code, the savings could be substantial.

@main def main() =
  case class Person(name: String, age: Int):
    // The following line invokes the print() method
    // defined in the Person companion object.
    def print = Person.print(name, age)


  object Person: // This is a companion object to the above Person class.
    // Because this print() method gets called ONLY from the Person class
    // defined above, the programmer invokes it via an instance of a
    // Person class, as is demonstrated further below.
    def print(name: String, age: Int): Unit =
      println(s"name = $name, age = $age")

    // The following printPersonViaArgument() method does NOT get
    // invoked via an instance of the Person class.  Instead, the
    // programmer calls it directly, passing its argument an
    // instance of a Person class.
    def printPersonViaArgument(person: Person): Unit =
      println(s"name = ${person.name}, age = ${person.age}")

  val person = Person("Jack", 17)
  person.print // PRINTS: name = Jack, age = 17
  Person.printPersonViaArgument(person.copy("Jane", 29)) // PRINTS: name = Jane, age = 29
