This web page covers the Scala object, where "object" is a Scala keyword.
The following topics are related to the Scala object and have a dedicated
section below.

* OBJECT
* CASE OBJECT


OBJECT
======
Both a Scala class and Scala object are used to represent some "thing",
or some "entity".  When there can exist more than one of these things
(i.e., people, houses, automobiles), a Scala class is used.  When only
one of a "thing" can exist (i.e., planet Earth, a mathematical constant,
etc.), a Scala object should be used.

The following 4 items are true of a Scala object:

1) A Scala object accepts no arguments and can't be instantiated.
   This is because a Scala object represents a "singleton", which
   means it can represent only one of something.

2) A Scala object is "lazy", which means it gets created the first
   time it's referenced.  (Recall, an object isn't instantiated).

3) A Scala object can extend a class or a trait, but a class cannot
   extend an object.

4) A Scala object is often used as a "companion object" to a class.
   An object becomes a "companion object" to a class when the
   object's name is identical to the class name, and it resides in
   the same file as the class.

5) Scala 3 added the 'enum' keyword.  In Scala 3, an object can also
   become a "companion object" to an enum.  An object becomes a
   "companion object" to an enum when the object's name is identical
   to the enum name, and it resides in the same file as the enum.

A Scala object should be used to...

1) store constants using a val.  So every instance of the companion
   class can reference this same value.

2) contain methods that will work with every instance of the companion
   class. So every instance of the companion class can invoke this same
   method.

Remember, the Scala object should reside in the same file as its companion class.

Placing members and methods in a class's companion object (instead of in the
class itself) saves memory (and execution time) because only one instance of
the member, or method, gets created--instead of creating a new member/method
for every new instantiation of the class.

IMPORTANT: A companion class can access the private members of its companion object.
           If you write your own apply() or unapply() methods for a regular class,
           those methods should reside in a companion object, not in the class.
           The apply() method is used as "factory method" to construct new instances
           of a class.  The unapply() method is used to deconstruct a class, so
           the class can be used with the "match" keyword for pattern matching.

The following program demonstrates a companion object.  The print() method
located in the Person class invokes the print() method located in the Person
companion object.

In this example there's not much savings in computer memory or execution time
by adding this companion object, because the print() method in the Person object
contains only one line of code.  However, if the print() method in the Person
object contained several lines of code, the savings in computer memory and execution
time wouldadd up with every instantiation of another Person class.

@main def main() =
  case class Person(name: String, age: Int):
    // The following print() method invokes the print() method
    // defined in the Person class's companion object below.
    def print = Person.print(name, age)

  // *************************************************
  // This is the companion object to the above Person case class.
  object Person:
    def print(name: String, age: Int): Unit =
      println(s"name = $name, age = $age")
    def printPersonViaArgument(person: Person): Unit =
      println(s"name = ${person.name}, age = ${person.age}")
  // *************************************************

  val person = Person("Jack", 17) // Instantiates a Person class.

  // The following line invokes the print() method defined in the
  // Person class, which then invokes the print() method defined
  // in the Person object.
  person.print // PRINTS: name = Jack, age = 17

  // Here we directly invoke the printPersonViaArgument()
  // method defined in the Person object.
  Person.printPersonViaArgument(person.copy("Jane", 29)) // PRINTS: name = Jane, age = 29


CASE OBJECT
===========
This case object automatically provides implementations for toString, hashCode, and equals methods

A "case object" is to a Scala object what a "case class" is to a Scala class.
When you write a "case object", Scala automatically generates the following
methods, which don't get generated when you write a regular object.

copy()    - Creates and returns a new "case object" instance that's a copy
            of the existing "case object".  If you pass this copy() method any
            arguments, those arguments specify the "case object" member values
            that will be changed in the copied-to (returned) instance.  Calling
            copy() without any arguments makes an exact copy of the "object class".

equals()   - Determines if two Scala objects are equal.  Read the hashCode() description below.

hashCode() - Returns an Int value.  If calling hashCode() on two Scala objects return the
             same Int value, they are equal.  You can use the equals() method or the
             '==' operator in place of calling hashCode() to determine equivalency.

toString() - Renders the "object classâ€™s name and fields to a String.  You may want
             to define your own toString() method for a "case object" (using the 'override'
             keyword) so it prints information about the "case object" that you desire.

unapply() - The unapply() method serves as an extractor for pattern matching on
            a "case object".  (Pattern matching is invoked via the "match" keyword.)
            For every "case object" that you write, Scala automatically generates
            an unapply() method for you.  So you can perform pattern matching
            on a "case object" without having to write an unapply() method.

A "case object" is Serializable by default.  A regular object isn't Serializable by default.

