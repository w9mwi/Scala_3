This web page covers the Scala object, where "object" is a keyword.
Both of the following items have a dedicated section below.

* Object
* Case Object


OBJECT
======
Both a Scala class and Scala object are used to represent some "thing",
or some "entity".  When there can exist more than one of these things
(i.e., people, houses, automobiles), a Scala class is used.

A Scala object is often used as a "companion object."  A "companion
object" is an object that has an idential name to its "companion
class", and is located in the same file.

A Scala object accepts no arguments and can't be instantiated.  This is
because a Scala object represents a "singleton", which means it can
represent only one of something.  A Scala object is "lazy", which means
it gets created the first time it's referenced.  An object can extend
a class or a trait, but a class cannot extend an object.

A Scala object should be used...

1) To store constant values in a val.  So every instance of the companion
   class will reference the same value.

2) To store methods that will work with all instances of the companion class.

Remember, the Scala object should reside in the same file as its companion class.

Placing members and methods in a class's companion object (instead of in the
class itself) saves memory (and also time) because only one instance of the
value or method will get created--instead of creating a new member/method
every time the class is instantiated.

IMPORTANT: A companion class can access the private members of its companion object.
           A companion object can access the private members of its companion class.
           If you write your own apply() or unapply() methods for a regular class,
           those methods should reside in a companion object, not in the class.
           The apply() method is used as "factory method" to construct new instances
           of the object's companion class.  The unapply() method is used to deconstruct
           the object's companion class, so the class can be used with the "match"
           keyword for pattern matching.

The following program demonstrates a companion object.  The print() method
located in the Person class invokes the print() method located in the Person
companion object.

In this example there's not much time or memory savings by adding a companion
object because the print() method in the Person object contains only one line
of code.  However, if the print() method in the Person object contained several
lines of code, the savings in of time and memory would add up with every
instantiation of another Person class.

@main def main() =
  case class Person(name: String, age: Int):
    // The following print() method invokes the print() method
    // defined in the Person class's companion object below.
    def print = Person.print(name, age)

  // *************************************************
  // This is the companion object to the above Person case class.
  object Person:
    def print(name: String, age: Int): Unit =
      println(s"name = $name, age = $age")
    def printPersonViaArgument(person: Person): Unit =
      println(s"name = ${person.name}, age = ${person.age}")
  // *************************************************

  val person = Person("Jack", 17) // Instantiates a Person class.

  // The following line invokes the print() method defined in the
  // Person class, which then invokes the print() method defined
  // in the Person object.
  person.print // PRINTS: name = Jack, age = 17

  // Here we directly invoke the printPersonViaArgument()
  // method defined in the Person object.
  Person.printPersonViaArgument(person.copy("Jane", 29)) // PRINTS: name = Jane, age = 29


CASE OBJECT
===========
This case object automatically provides implementations for toString, hashCode, and equals methods

A "case object" is to a Scala object what a "case class" is to a Scala class.
When you write a "case object", Scala automatically generates the following
methods, which don't get generated when you write a regular object.

hashCode() - Returns an Int value.  If calling hashCode() on two Scala objects return the
             same Int value, they are equal.  You can use the equals() method or the
             '==' operator in place of calling hashCode() to determine equivalency.

toString() - Renders the "object classâ€™s name and fields to a String.  You may want
             to define your own toString() method for a "case object" (using the 'override'
             keyword) so it prints information about the "case object" that you desire.

unapply() - The unapply() method serves as an extractor for pattern matching on
            a "case object".  (Pattern matching is invoked via the "match" keyword.)
            For every "case object" that you write, Scala automatically generates
            an unapply() method for you.  So you can perform pattern matching
            on a "case object" without having to write an unapply() method.

A "case object" is Serializable by default.  A regular object isn't Serializable by default.

