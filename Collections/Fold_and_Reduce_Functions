SCALA FOLD AND REDUCE FUNCTIONS
===============================
All Scala collections classes (including the collection classes listed
here) contain the fold, foldRight, foldLeft and reduce functions.

Sequence Collections: Array          Set Collections: HashSet
                      ArrayBuffer                     LinkedHashSet
                      List                            Set
                      ListBuffer                      TreeSet
                      Queue
                      Stack
                      Vector

Map Collections: HashMap              Other Collections: Either
                 LinkedHashMap                           LazyList
                 Map                                     Option
                 TreeMap                                 BitSet

Although the fold, foldRight, and foldLeft functions contain two argument
lists, they're NOT curried functions.  (A curried function returns a
partially-applied function for every operation performed; until it
returns a final value instead of a partially-applied function.)

The first argument list supplied to the fold, foldRight, and foldLeft
functions contains an "initial value", or a "start value."  The second
argument list supplied to the fold, foldRight, and foldLeft functions
contains the function to be invoked on every element of the collection.

The function that gets passed (as an argument list) to the fold, foldRight,
and foldLeft functions is often times a short/simple function that's written
as an anonymous function.  The differences between the fold, foldRight, and
foldLeft functions are explained here...

foldRight - The foldRight function always processes the collection's elements
            from RIGHT TO LEFT.  Which means it processes the last element of
            the collection first, and its first element last.

foldLeft  - The foldLeft function always processes the collection's elements
            from LEFT TO RIGHT.  Which means it processes the first element of
            the collection first, and its last element last.

fold      - The fold function may process the collection's elements in any order.
            (The order is undetermined.)  So use the fold function only when the
            processing order of a collection doesn't matter.  For example...

            When the operation performed on a collection is ASSOCIATIVE (THE ORDER
            MATTERS), never use the fold function.  Use foldRight or foldLeft instead.

            When the operation performed on a collection is COMMUTATIVE (THE ORDER
            DOESN'T MATTER), you can use the fold, foldRight, or foldLeft functions.
            But you should use the fold function in this case (when order doesn't
            matter), as it may be more efficient than foldRight and foldLeft.

            COMMUTATIVE vs. ASSOCIATIVE
 
            COMMUTATIVE: When the order of an operation DOESN'T matter (i.e.
                         multiplication/addition), it's commutative.
            Example:     (4 X 3 X 2)  =  (2 X 3 X 4)  =  (3 X 2 X 4) = 24
                         (4 + 3 + 2)  =  (2 + 3 + 4)  =  (3 + 2 + 4) = 9

            ASSOCIATIVE: When the order of an operation DOES matter (i.e.
                         division/subtaction), it's associative.
            Example:     (4 ÷ 3 ÷ 2)  ≠  (2 ÷ 3 ÷ 4)  ≠  (3 ÷ 2 ÷ 4)
                         (4 - 3 - 2)  ≠  (2 - 3 - 4)  ≠  (3 - 2 - 4)

reduce    - The reduce function is very similar to the 3 fold functions mentioned above,
            but it accepts only one argument list, which is the function applied to all
            elements of the collection.  The reduce function differs from the three fold
            functions in that it doesn't accept an initial/start value argument, and it
            must be invoked on non-empty collection, or it will throw an exception.

            When possible, use the reduce function instead of a fold function because reduce
            is more efficient.  Here are 3 differences between the reduce and fold functions:

            1) The three fold functions accept two argument lists.  One of its argument lists
               accepts an initial/start value.  This allows the three fold functions to work
               on an empty collection, by returning the initial/start value as the final result.
               If the collection isn't empty, the initial/start value is used in the first
               operation performed on the collection.

               The reduce function accepts only one argument list, so it accepts no initial/start
               value.  The reduce function will throw an exception if you attempt to invoke it on
               an empty collection.

            2) The reduce function operates on the collection in only one direction,
               from Left-To-Right (beginning with element index zero).

               The 3 fold functions operate on the collection in these 3 different orders:

               foldLeft  = Left-To-Right       - Begins by processing the collection's FIRST ELEMENT first.
               foldRight = Right-To-Left       - Begins by processing the collection's LAST ELEMENT first.
               fold      = Indeterminate Order - Use fold only when processing order of the collection doesn't matter.

            3) The reduce function always returns a value having the same data type as the collection.
               The 3 fold functions can return a data type that's different than the collection's data type;
               thus enabling data type transformations.


The following program demonstrates the behavior of the fold, foldRight,
foldLeft, and reduce functions.  Read the in-line comments for details.

----------------------------------------------------------------------------------------------
@main def main() =
  // SECTION 1) *************************************************************
  // This section demonstrates that when a collection is EMPTY, the fold,
  // foldLeft, and foldRight functions return only the "initial value",
  // which is the value passed to the function's first argument list.
  var intList:List[Int] = List[Int]()        // An EMPTY List[Int].
  var intResult: Int = intList.fold(77)(_-_) // _-_ is an anonymous function
  println(s"1) intResult = $intResult")      // PRINTS: 1) intResult = 77
  intResult = intList.foldLeft(77)(_-_)      // _-_ is an anonymous function
  println(s"2) intResult = $intResult")      // PRINTS: 2) intResult = 77
  intResult = intList.foldRight(77)(_-_)     // _-_ is an anonymous function
  println(s"3) intResult = $intResult")      // PRINTS: 3) intResult = 77

  // SECTION 2) *************************************************************
  intList = List[Int](-7, 6, -5, -4, 3, 2, -1)
  // When the two argument lists passed to the fold and foldLeft functions
  // are identical, they may return identical results.  However, the fold
  // function doesn't guarantee the order in which a collection's elements
  // are processed.  Therefore, NEVER use the fold function when the
  // collection's processing order is COMMUTATIVE (when the processing
  // order of the collection's elements do matter).
  // The ORDER of the math operation performed by fold is: UNKNOWN
  intResult = intList.fold(77)(_-_)      // _-_ is an anonymous function
  println(s"4) intResult = $intResult")  // PRINTS: 4) intResult = 83

  // The ORDER of the math operation performed by foldLeft is:
  // 77−(-7)−6−(-5)−(-4)−3−2−(-1) = 83
  intResult = intList.foldLeft(77)(_-_)  // _-_ is an anonymous function
  println(s"5) intResult = $intResult")  // PRINTS: 5) intResult = 83

  // The ORDER of the math operation performed by foldRight is:
  // 77−(-1)-2-3-(4)-(-5)-6-(-7) = -91
  intResult = intList.foldRight(77)(_-_) // _-_ is an anonymous function
  println(s"6) intResult = $intResult")  // PRINTS: 6) intResult = -91


  // SECTION 3) *************************************************************
  // This section is identical to SECTION 2) above except for this one
  // difference.  The anonymous function passed to the 3 fold functions
  // is: (x,y)=>x-y    This anonymous function is functionally equivalent
  // the _-_ anonymous function used in SECTION 2) above.
  intResult = intList.fold(77)((x,y)=>x-y)      // (x,y)=>x-y is an anonymous function
  println(s"7) intResult = $intResult")         // PRINTS: 7) intResult = 83
  intResult = intList.foldLeft(77)((x,y)=>x-y)  // (x,y)=>x-y is an anonymous function
  println(s"8) intResult = $intResult")         // PRINTS: 8) intResult = 83
  intResult = intList.foldRight(77)((x,y)=>x-y) // (x,y)=>x-y is an anonymous function
  println(s"9) intResult = $intResult")         // PRINTS: 9) intResult = -91

  // SECTION 4) *************************************************************
  // This sections demonstrates how to count the number of characters in the
  // val wordList; using the foldLeft and foldRight functions.
  val wordList:List[String] = List[String]("How", "many", "characters", "are", "in", "this", "wordList?")

  val foldLeftFunc:(Int,String)=>Int = (count:Int, word:String) => count + word.length
  intResult = wordList.foldLeft(0)(foldLeftFunc)
  println(s"10) intResult = $intResult")         // PRINTS: 10) intResult = 35
  intResult = wordList.foldLeft(0)(_ + _.length) // This anonymous function is equivalent to foldLeftFunc.
  println(s"11) intResult = $intResult")         // PRINTS: 11) intResult = 35

  // foldRightFunc below is equivalent to foldLeftFunc above, except the
  // order of its argument list is swapped, so it'll work with foldRight.
  // The anonymous function below must also be written differently than
  // the one above, to make it work with foldRight.
  val foldRightFunc:(String,Int)=>Int = (word:String, count:Int) => count + word.length
  intResult = wordList.foldRight(0)(foldRightFunc)
  println(s"12) intResult = $intResult")          // PRINTS: 12) intResult = 35
  intResult = wordList.foldRight(0)(_.length + _) // This anonymous function is equivalent to foldRightFunc.
  println(s"13) intResult = $intResult")          // PRINTS: 13) intResult = 35

  // SECTION 5) *************************************************************
  // This section demonstrates how to concatenate all strings contained in a
  // List[String] using foldLeft and foldRight; and how their results differ.
  //
  // strConcatMethod and strConcatFunc defined here are functionally equivalent.
  def strConcatMethod(str1:String, str2:String):String = str1.concat("-").concat(str2)
  val strConcatFunc:(str1:String, str2:String)=>String =
    (str1:String, str2:String) => str1.concat("-").concat(str2)

  // Perform a string concat using both foldLeft and foldRight;
  // passing to them strConcatMethod as an argument.
  val strList:List[String] = List[String]("ABC", "DEF", "GHI", "JKL", "MNO")
  var strResult:String = strList.foldLeft("BEGIN")(strConcatMethod)
  println(s"14) strResult = $strResult") // PRINTS: 14) strResult = BEGIN-ABC-DEF-GHI-JKL-MNO
  strResult = strList.foldRight("END")(strConcatMethod)
  println(s"15) strResult = $strResult") // PRINTS: 15) strResult = ABC-DEF-GHI-JKL-MNO-END

  // Perform a string concat using both foldLeft and foldRight;
  // passing to them strConcatFunc as an argument.
  strResult = strList.foldLeft("BEGIN")(strConcatFunc)
  println(s"16) strResult = $strResult") // PRINTS: 16) strResult = BEGIN-ABC-DEF-GHI-JKL-MNO
  strResult = strList.foldRight("END")(strConcatFunc)
  println(s"17) strResult = $strResult") // PRINTS: 17) strResult = ABC-DEF-GHI-JKL-MNO-END
end main

----------------------------------------------------------------------------------------------

The following program demonstrates how to write a custom foldLeft function,
and a custom foldRight function.  Both of which are recursive functions.

----------------------------------------------------------------------------------------------

def myFoldLeft[A,B](list:List[A], initialValue:B)(function:(B,A)=>B):B =
  if (list.isEmpty)
    initialValue
  else
    function(myFoldLeft(list.tail, initialValue)(function), list.head)
end myFoldLeft

def myFoldRight[A,B](list:List[A], initialValue:B)(function:(A,B)=>B):B =
  if (list.isEmpty)
    initialValue
  else
    function(list.head, myFoldRight(list.tail, initialValue)(function))
end myFoldRight

def concatStr(str1:String, str2:String):String =
  str1.concat("-").concat(str2)
end concatStr

@main def main() =
  // ********************************************************************************
  // This section calls myFoldLeft and myFoldRight on a List[Int].
  val intList:List[Int] = List[Int](7, 6, 5, 4, 3, 2, 1)
  // The math operation performed by myFoldLeft is:
  // 77−7−6−5−4−3−2−1 = 49
  var intResult:Int = myFoldLeft(intList, 77)(_-_)
  println(s"1) intResult = $intResult") // PRINTS: 1) intResult = 49
  // The math operation performed by myFoldRight is:
  // (1-(2-(3-(4-(5-(6-7))))))-77 = -73
  intResult = myFoldRight(intList, 77)(_-_)
  println(s"2) intResult = $intResult") // PRINTS: 2) intResult = -73

  // ********************************************************************************
  // This section calls myFoldLeft and myFoldRight on a List[String].
  val strList:List[String] = List[String]("ABC", "DEF", "GHI", "JKL", "MNO")
  // The following line of code replicates the operation performed by myFoldLeft below.
  var strResult:String = concatStr(concatStr(concatStr(concatStr(concatStr("BEGIN", "MNO"), "JKL"), "GHI"), "DEF"), "ABC")
  println(s"3) strResult = $strResult") // PRINTS: 3) strResult = BEGIN-MNO-JKL-GHI-DEF-ABC
  strResult = myFoldLeft(strList, "BEGIN")(concatStr)
  println(s"4) strResult = $strResult") // PRINTS: 4) strResult = BEGIN-MNO-JKL-GHI-DEF-ABC

  // The following line of code replicates the operation performed by myFoldRight below.
  strResult = concatStr(concatStr(concatStr(concatStr(concatStr("ABC", "DEF"), "GHI"), "JKL"), "MNO"), "END")
  println(s"5) strResult = $strResult") // PRINTS: 5) strResult = ABC-DEF-GHI-JKL-MNO-END
  strResult = myFoldRight(strList, "END")(concatStr)
  println(s"6) strResult = $strResult") // PRINTS: 6) strResult = ABC-DEF-GHI-JKL-MNO-END
end main

----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
