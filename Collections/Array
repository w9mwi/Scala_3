ARRAY
=====

The Scala 3 Array class is mutable.  Scala 3 also contains an
immutable array object (not a class) having the name IArray.

If you need a mutable array, use the Array class.
If you need an immutable array, use the IArray object.

Difference Between Array and ArrayBuffer
========================================
A Scala Array has a fixed number of elements.  Once an Array is
declared, its size (the number of elements it contains) cannot be
changed.  The Scala ArrayBuffer is variable in size; so even after
it's declared, you can increase or decrease its size (the number of
elements it contains) dynamically.

In Scala, Arrays are SEQUENCES, which means data is stored in elements
that can be accessed via a sequential Integer index.  When an Array is
declared as a "val" you cannot reassign that "val" to point to a
different Array, but you can reassign its elements to store different
values.

Read in-line comments in the following sample programs
to understand some Array fundamentals.

===========================================================
@main def main():Unit =
  // An UN-initialized Array REQUIRES the "new" keyword in its declaration,
  // as in EXAMPLE 1), EXAMPLE 2) and EXAMPLE 3) below.  When an Array is
  // initialized upon its declaration, the declaration CAN'T use the "new"
  // keyword, as shown in EXAMPLE 4) below.

  // EXAMPLE 1)
  // An UN-initialized Array that contains a number type (i.e., Int, Float, Double)
  // will have default values of ZERO for each element, as in this example...
  val array_1:Array[Int] = new Array[Int](3) // REQUIRES "new" keyword.
  println(s"array_1(0) = ${array_1(0)}, array_1(1) = ${array_1(1)}, array_1(2) = ${array_1(2)}")
  // PRINTS: array_1(0) = 0, array_1(1) = 0, array_1(2) = 0

  // EXAMPLE 2)
  // An UN-initialized Array that contains a Boolean type will have
  // default values of false for each element, as in this example...
  val array_2:Array[Boolean] = new Array[Boolean](3) // REQUIRES "new" keyword.
  println(s"array_2(0) = ${array_2(0)}, array_2(1) = ${array_2(1)}, array_2(2) = ${array_2(2)}")
  // PRINTS: array_2(0) = false, array_2(1) = false, array_2(2) = false

  // EXAMPLE 3)
  // An UN-initialized Array that contains a data type that is NOT a number or a
  // Boolean will have default values of null for each element, as in this example...
  val array_3: Array[String] = new Array[String](3) // REQUIRES "new" keyword.
  println(s"array_3(0) = ${array_3(0)}, array_3(1) = ${array_3(1)}, array_3(2) = ${array_3(2)}")
  // PRINTS: array_3(0) = null, array_3(1) = null, array_3(2) = null

  // EXAMPLE 4)
  // An Array that is initialized upon its declaration CAN'T contain
  // the "new" keyword in its declaration, as in this example.
  val array_4:Array[Int] = Array[Int](111, 222, 333) // The "new" keyword CAN'T be used here.
  println(s"array_4(0) = ${array_4(0)}, array_4(1) = ${array_4(1)}, array_4(2) = ${array_4(2)}")
  // PRINTS: array_4(0) = 111, array_4(1) = 222, array_4(2) = 333

  // EXAMPLE 5)
  // Unlike most Scala collections, an Array CAN'T be declared
  // as immutable.  Even when an Array is declared as a "val"
  // all of its elements are MUTABLE.  As shown here...
  array_4(0) = 777
  array_4(1) = 888
  array_4(2) = 999
  println(s"array_4(0) = ${array_4(0)}, array_4(1) = ${array_4(1)}, array_4(2) = ${array_4(2)}")
  // PRINTS: array_4(0) = 777, array_4(1) = 888, array_4(2) = 999
end main
===========================================================

HOW TO INITIALIZE ARRAYS (AND LISTS) UPON THEIR DECLARATION.

Instead of declaring an Array in one line of code, and then initializing
its values later (one element at a time), it's possible to declare an Array
and initialize all of its elements in a single line.  Read in-line comments
in the below code sample for details.

@main def main():Unit =
  // EXAMPLE 1)
  // Create a 10-element Array of Int values, and initialize each element with the Int value of 4.
  var intArray:Array[Int] = Array.fill(10)(4)
  println(s"EXAMPLE 1) intArray.length = ${intArray.length}")
  // PRINTS:  EXAMPLE 1) intArray.length = 10

  // EXAMPLE 2)
  // Print the value contained in each of the Array's 10 elements.
  print("EXAMPLE 2) ")
  intArray.foreach(print) // PRINTS: EXAMPLE 2) 4444444444

  // EXAMPLE 3)
  // Print the value contained in each of the Array's 10 elements using
  // a different print statement than in EXAMPLE 2).
  print("\nEXAMPLE 3) ")
  intArray.foreach{print(_)}  // PRINTS: EXAMPLE 3) 4444444444

  // EXAMPLE 4)
  // Print the value contained in each of the Array's 10 elements using
  // a different print statement than in EXAMPLE 2) and EXAMPLE 3).
  print("\nEXAMPLE 4) ")
  intArray.foreach {x => print(s"$x ")} // PRINTS: EXAMPLE 4) 4 4 4 4 4 4 4 4 4 4

  // EXAMPLE 5)
  // Initialize a new List having 6 elements, where each element contains the string "XYZ".
  val stringList:List[String] = List.fill(6)("XYZ")
  print("\nEXAMPLE 5) ")
  stringList.foreach(x => print(s"$x "))  // PRINTS:  EXAMPLE 5) XYZ XYZ XYZ XYZ XYZ XYZ

  // EXAMPLE 6)
  var idx = 1
  // The following line of code initializes a new List with 5 elements.
  // The second argument list (between the {}) contains a block of code
  // that gets executed for each element in intList.
  var intList:List[Int] = List.fill(5){idx*=2; idx}
  print("\nEXAMPLE 6) ")
  intList.foreach(x => print(s"$x ")) // PRINTS:  EXAMPLE 6) 2 4 8 16 32

  // EXAMPLE 7)
  intList = 1::intList // Prepend a 1 to intList
  print("\nEXAMPLE 7) ")
  intList.foreach(x => print(s"$x "))  // PRINTS:  EXAMPLE 7) 1 2 4 8 16 32

  // EXAMPLE 8)
  intList = List.tabulate(10)(x=>x*x) // The value of each element will be its index SQUARED.
  print("\nEXAMPLE 8) ")
  intList.foreach(x => print(s"$x "))  // PRINTS:  EXAMPLE 8) 0 1 4 9 16 25 36 49 64 81

  // EXAMPLE 9)
  // Create a 6-element Array, where each element in the Array is initialized with
  // this value: 3*x*x + 5x - 7.  For the first element x = 0; the second element x = 1;
  // the last element x = 5.
  intArray = Array.tabulate(6)(x => 3*x*x + 5*x - 7) // NOTE: Uses (), equivalent to the line below.
  println(s"\nEXAMPLE 9) intArray.length = ${intArray.length}") // PRINTS:  EXAMPLE 9) intArray.length = 6

  // EXAMPLE 10)
  print("EXAMPLE 10) ")
  intArray.foreach(x => print(s"$x ")) // PRINTS:  EXAMPLE 10) -7 1 15 35 61 93

  // EXAMPLE 11)
  print("\nEXAMPLE 11) ")
  intArray = Array.range(0, 12)
  println(s"intArray.length = ${intArray.length}") // PRINTS:  EXAMPLE 11) intArray.length = 12

  // EXAMPLE 12)
  print("EXAMPLE 12) ")
  intArray.foreach(x => print(s"$x ")) // PRINTS:  EXAMPLE 12) 0 1 2 3 4 5 6 7 8 9 10 11
end main
===========================================================
MULTI-DIMENSIONAL ARRAYS - PART 1

Read in-line comments in the following code sample to understand
the fundamentals of multi-dimensional arrays.

@main def main():Unit =
  val columns:Int = 3
  val rows:Int = 4
  // Declare an uninitialized 2-dimensional Array.
  val matrix2X2: Array[Array[Int]] = Array.ofDim[Int](rows, columns)

  // The following 2 nested for loops initialize every element
  // of the matrix2X2 Int Array.
  for (idx <- matrix2X2.indices) {
    for (jdx <- matrix2X2(idx).indices) {
      matrix2X2(idx)(jdx) =
        if (idx == 0)
        { idx + jdx }
        else if (jdx == 0)
        { matrix2X2(idx - 1)(columns - 1) + 1 }
        else
        { matrix2X2(idx)(jdx - 1) + 1 }
    }
  }

  // *******************************************************************
  // EXAMPLE 1 and EXAMPLE 2 below show two examples that traverse all
  // elements of the matrix2X2 Int Array; and print the contents of each
  // element.  EXAMPLE 1 is the preferred way of doing it.
  print("EXAMPLE 1) ")
  matrix2X2.foreach {
    x => x.foreach(x => print(s"$x, ")) // PRINTS:  EXAMPLE 1) 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
  }

  print("\nEXAMPLE 2) ")
  matrix2X2.foreach {
  for (elem <- _) {
    print(s"$elem, ") // PRINTS:  EXAMPLE 2) 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    }
  }
  println

  /**
   *
   * @param matrix2D
   *
   * Print the contents of a 2-dimensional Int Array in a format
   * that displays the Array as a matrix or rows and columns.
   * For example, a two-dimensional Array of size 3X4 will be
   * printed like this:
   * 0 1 2
   * 3 4 5
   * 6 7 8
   * 9 10 11
   */
  def print2DMatrix(matrix2D: Array[Array[Int]]): Unit =
    // EXAMPLE A) and EXAMPLE B) below print the entire two-dimensional
    // Int Array in a matrix format.  EXAMPLE A) is the preferred way
    // of doing it.
    println("EXAMPLE A) of printing a matrix.")
    matrix2D.foreach {
      x => x.foreach(x => print(s"$x "))
      println
    }

    println("EXAMPLE B) of printing a matrix.")
    for (idx <- matrix2D.indices) {
      for (jdx <- matrix2D(idx).indices)
        print(" " + matrix2D(idx)(jdx))
      println
    }
  end print2DMatrix

  print2DMatrix(matrix2X2)
  print2DMatrix(matrix2X2)
end main


===========================================================
MULTI-DIMENSIONAL ARRAYS - PART 2

@main def main():Unit =
  val minNoOfElems:Int = 3
  val maxNoOfElems:Int = 6
  if (minNoOfElems < 2) {
    // It makes no sense for an Array to contain less than 2 elements.
    // So exit the program if it does.
    println(s"ERROR: minNoOfElems ($minNoOfElems) can't be less than 2.")
    return // Exit the program.
  }
  if (maxNoOfElems < minNoOfElems) {
    println(s"ERROR: maxNoOfElems ($maxNoOfElems) can't be less than minNoOfElems ($minNoOfElems).")
    return // Exit the program.
  }

  // 1) Create a new 100-element Array, and assign it to val array2D.
  // 2) For each element in array2D, create a new Array that has a random
  //    number of elements (ranging from minNoOfElems to maxNoOfElems).
  // 3) Next, assign each of those elements a random number.
  // 4) Finally, assign this newly-created Array to the current index of array2D.
  val array2D:Array[Array[Double]] =
    Array.fill(100) {
      // THIS BLOCK OF CODE EXECUTES ONCE FOR EACH OF THE 100 ARRAY ELEMENTS CREATED.

      // randNumOfElems is the number of elements the Array[Double] will contain.
      // We want randNumOfElems to obtain a random Int value ranging from 0 to
      // maxNoOfElems.  If we don't add 1 to maxNoOfElems (as is done below),
      // randNumOfElems would instead obtain an Int value from 0 to (maxNoOfElems-1)
      // instead.
      val randNumOfElems:Int = util.Random.nextInt(maxNoOfElems+1)

      // Create an Array[Double] with the appropriate number of elements,
      // and populate each element with a random number from 0.0 to < 1.0.
      if (randNumOfElems < minNoOfElems)
        Array.fill(minNoOfElems)(math.random)
      else
        Array.fill(randNumOfElems)(math.random)
    }

  println("===========================================")
  println("Loop through every element in array2D that contains a 3-element Array.")
  println("Then, calculate and print the average of those 3 numbers for each element.")
  var result:Array[Double] = for (myArray <- array2D) yield myArray(0) + myArray(1) + myArray(2) / 3.0D
  result.foreach(println)
end main

===========================================================
RECURSION - The following code sample demonstrates how to use a recursive
            function to obtain the result of multiplying the contents of
            an Array[Int].



===========================================================
Go to the following web link ('Annual Percent Growth') to see another
example of how to use a Scala Array.

--> https://github.com/w9mwi/Scala/blob/master/Demos/Annual_Percent_Growth

===========================================================

