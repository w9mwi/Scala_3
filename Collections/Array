ARRAY
=====

The Scala 3 Array class is mutable.  Scala 3 also contains an
immutable array object (not a class) having the name IArray.

If you need a mutable array, use the Array class.
If you need an immutable array, use the IArray object.

Difference Between Array and ArrayBuffer
========================================
A Scala Array is a fixed-size array.  Once an Array is created, its
size (the number of elements it contains) cannot be changed.  The Scala
ArrayBuffer is variable in size; so even after it's created, you can
increase or decrease its size (the number of elements it contains)
dynamically.

In Scala, Arrays are SEQUENCES, which means data is stored in elements
that can be accessed via a sequential Integer index.  When an Array is
declared as a "val" you cannot reassign that "val" to point to a
different Array, but you can reassign its elements to store different
values.  An Array can't be declared as immutable.  If you need an
immutable Array, use the IArray object instead.

Read in-line comments in the following sample programs
to understand some Array fundamentals.

===========================================================
@main def main() =
  // An UN-initialized Array REQUIRES the "new" keyword in its declaration,
  // as in EXAMPLE 1), EXAMPLE 2) and EXAMPLE 3) below.  When an Array is
  // initialized upon its declaration, the declaration CAN'T use the "new"
  // keyword, as shown in EXAMPLE 4) below.

  // EXAMPLE 1)
  // An UN-initialized Array that contains a number type (i.e., Int, Float, Double)
  // will have default values of ZERO for each element, as in this example...
  val array_1:Array[Int] = new Array[Int](3) // REQUIRES "new" keyword.
  println(s"array_1(0) = ${array_1(0)}, array_1(1) = ${array_1(1)}, array_1(2) = ${array_1(2)}")
  // PRINTS: array_1(0) = 0, array_1(1) = 0, array_1(2) = 0

  // EXAMPLE 2)
  // An UN-initialized Array that contains a Boolean type will have
  // default values of false for each element, as in this example...
  val array_2:Array[Boolean] = new Array[Boolean](3) // REQUIRES "new" keyword.
  println(s"array_2(0) = ${array_2(0)}, array_2(1) = ${array_2(1)}, array_2(2) = ${array_2(2)}")
  // PRINTS: array_2(0) = false, array_2(1) = false, array_2(2) = false

  // EXAMPLE 3)
  // An UN-initialized Array that contains a data type that is NOT a number or a
  // Boolean will have default values of null for each element, as in this example...
  val array_3: Array[String] = new Array[String](3) // REQUIRES "new" keyword.
  println(s"array_3(0) = ${array_3(0)}, array_3(1) = ${array_3(1)}, array_3(2) = ${array_3(2)}")
  // PRINTS: array_3(0) = null, array_3(1) = null, array_3(2) = null

  // EXAMPLE 4)
  // An Array that is initialized upon its declaration CAN'T contain
  // the "new" keyword in its declaration, as in this example.
  val array_4:Array[Int] = Array[Int](111, 222, 333) // The "new" keyword CAN'T be used here.
  println(s"array_4(0) = ${array_4(0)}, array_4(1) = ${array_4(1)}, array_4(2) = ${array_4(2)}")
  // PRINTS: array_4(0) = 111, array_4(1) = 222, array_4(2) = 333

  // EXAMPLE 5)
  // Unlike most Scala collections, an Array CAN'T be declared
  // as immutable.  Even when an Array is declared as a "val"
  // all of its elements are MUTABLE.  As shown here...
  array_4(0) = 777
  array_4(1) = 888
  array_4(2) = 999
  println(s"array_4(0) = ${array_4(0)}, array_4(1) = ${array_4(1)}, array_4(2) = ${array_4(2)}")
  // PRINTS: array_4(0) = 777, array_4(1) = 888, array_4(2) = 999
end main
===========================================================

HOW TO INITIALIZE ARRAYS (AND LISTS) UPON THEIR DECLARATION.

Instead of declaring an Array in one line of code, and then initializing
its values later (one element at a time), it's possible to declare an Array
and initialize all of its elements in a single line.  Read in-line comments
in the below code sample for details.

