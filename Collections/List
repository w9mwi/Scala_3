LIST
====
A Scala List is immutable, so it cannot be altered/changed/updated after it's created.
If you want to alter/change/update a Scala List, you actually need to create a new List.
The following program demonstrates how to do that.

An empty List in Scala is designated by the keyword "Nil"; which is equivalent to: List()
In functional programming, Scala Lists are sometimes constructed recursively using the
"cons" operator (::).  Nil serves as the terminating condition for recursive operations
on Scala Lists.

A Scala List is a linked list which consists of a head and a tail.  A List's head
consists of only its first element; its tail consists of all remaining elements.
When a Scala List contains only a single element its head references that single
element; its tail references an empty List.  Here's an example:

   var intList: List[Int] = 123 :: Nil // Nil designates an empty List and is equivalent to: List()
   println(s"intList.head = ${intList.head}") // PRINTS: intList.head = 123
   println(s"intList.tail = ${intList.tail}") // PRINTS: intList.tail = List()
   intList = List(987)
   println(s"intList.head = ${intList.head}") // PRINTS: intList.head = 987
   println(s"intList.tail = ${intList.tail}") // PRINTS: intList.tail = List()

The List class inherits from the LinearSeq trait; NOT from the IndexedSeq trait.  This means
that accessing a List element via an index can take a long time because all elements in the
List (up to the index value) must be traversed.  You should avoid accessing elements of a
List via an index value, like this...

   myList(99)

If you have a large collection and want to access its elements via an index use
a collection class that inherits from the IndexedSeq trait, such an ArrayBuffer,
Vector, etc.

=============================================================================
The following program demonstrates how to do the following:

  1) Update a single element in a List.
  2) Append/Prepend a single element to a List.
  3) Concatenate (append or prepend) a List to another List.
  4) Use Nil and List() to designate an empty List.

-----------------------------------------------------------------------------------
@main def main() =
  var intList:List[Int] = List(-666, 2, 3)
  println(s"1) intList = $intList") // PRINTS: 1) intList = List(-666, 2, 3)

  // To "UPDATE" ONE ELEMENT of a List, call the List.updated method.
  // Because a List is immutable, this actually returns a new List.
  intList = intList.updated(0, 1) // 0 = the List index, 1 = the value
  println(s"2) intList = $intList") // PRINTS: 2) intList = List(1, 2, 3)

  // To PREPEND ONE ELEMENT to a List, use the :: operator, or the +: operator.
  // The :: operator is called the "cons" operator; short for the word "construct."
  // The +: operator is known as the "list prepend operator."
  // Both these operators return a new List.
  intList = 0 :: intList
  println(s"3) intList = $intList") // PRINTS: 3) intList = List(0, 1, 2, 3)
  intList = -1 +: intList
  println(s"4) intList = $intList") // PRINTS: 4) intList = List(-1, 0, 1, 2, 3)

  // To APPEND ONE ELEMENT to a List, use the :+ operator.
  // The :+ operator is known as the "list append operator."
  // This returns a new List.
  intList = intList :+ 4
  println(s"5) intList = $intList") // PRINTS: 5) intList = List(-1, 0, 1, 2, 3, 4)

  // To CONCAT A LIST to another List, use the ::: operator.  The ::: operator
  // is known as the "list concatenation operator."  This returns a new List.
  intList = List(-4, -3, -2) ::: intList ::: List(5, 6, 7)
  println(s"6) intList = $intList") // PRINTS: 6) intList = List(-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7)

  // THIS WON'T COMPILE  -->  val intList2:List[Int] = intList1 :: List(8, 9)
  // The above commented-out line won't compile because the cons operator (::)
  // requires the first operand to be a value, not a List.  To make the above
  // line compile, change the cons operator (::) to the list contact operator
  // (:::) as shown in the following line of code.
  val intList2: List[Int] = intList ::: List(8, 9)
  println(s"7) intList2 == $intList2") // PRINTS: 7) intList2 == List(-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)

  // An EMPTY LIST in Scala is designated by the keyword "Nil"; which is equivalent to: List()
  intList = Nil
  println(s"8) intList == $intList") // PRINTS: 8) intList == List()
  intList = List()
  println(s"9) intList == $intList") // PRINTS: 9) intList == List()

  // Nil can be used in pattern matching, like this...
  intList match
    case head :: tail => println(s"10) intList is NOT empty.")
    case Nil          => println(s"10) intList IS empty.") // PRINTS: 10) intList IS empty.

  // When constructing a List using only "cons" operators (::), the last element
  // in the List must be an empty List; designated by either List() or Nil.
  intList = -9 :: -8 :: -7 :: List()
  println(s"11) intList = $intList") // PRINTS: 11) intList = List(-9, -8, -7)
  intList = 7 :: 8 :: 9 :: Nil
  println(s"12) intList = $intList") // PRINTS: 12) intList = List(7, 8, 9)
-----------------------------------------------------------------------------------

=============================================================================

