

https://alvinalexander.com/scala/vector-class-methods-syntax-examples/


VECTOR
======
The elements of an Array class are mutable.  Elements of the Vector class are
immutable.  So once a Vector is initialized, you can't change any of its elements.
A Vector inherits from the IndexedSeq trait, which means that accessing any of its
elements via an index is fast and efficient.

Use a Vector (instead of an Array) when you want an immutable collection that
can be accessed fast and efficiently via an index.

The following program demonstrates how various ArrayBuffer operators
and ArrayBuffer methods work.

===================================================================================

@main def main() =
  // ******************************************************************
  // This section demonstrates various ways to populate a Vector
  // upon its initialization.

  // Create an empty Vector.
  var intVector:Vector[Int] = Vector[Int]()

  // Create an initialized Vector.  Notice that the 3 numbers in the Vector
  // are of 3 different data types.  The Scala compiler upcasts all 3 of
  // those values to type Double.
  val doubleVector = Vector(1, 1F, 1.0D)

  // Here's a bunch more ways to initialize a Vector...
  intVector = (1 to 5).toVector
  println(s"1) intVector = $intVector")  // PRINTS: 1) intVector = Vector(1, 2, 3, 4, 5)
  intVector = (1 until 10 by 2).toVector
  println(s"2) intVector = $intVector")  // PRINTS: 2) intVector = Vector(1, 3, 5, 7, 9)
  intVector = Vector.range(1, 6, 2)
  println(s"3) intVector = $intVector")  // PRINTS: 3) intVector = Vector(1, 3, 5)
  intVector = Vector.fill(3)(-987)
  println(s"4) intVector = $intVector")  // PRINTS: 4) intVector = Vector(-987, -987, -987)
  intVector = Vector.tabulate(3)(n=>n*n)
  println(s"5) intVector = $intVector") // PRINTS: 5) intVector = Vector(0, 1, 4)
  intVector = Vector.tabulate(4)(n=>n*n)
  println(s"6) intVector = $intVector") // PRINTS: 6) intVector = Vector(0, 1, 4, 9)



  var charVector:Vector[Char] = ('d' until 'h').toVector
  println(s"7) charVector = $charVector")  // PRINTS: 3) charVector = Vector(d, e, f, g)
  // ******************************************************************

  var fruits_1: Vector[String] = Vector("apple", "banana", "cherry", "date")
  println(s"8) fruits_1 = $fruits_1")

  // Append elements
  fruits_1 = fruits_1 :+ "elderberry"
  println(s"9) fruits_1 = $fruits_1")

  // Prepend elements
  fruits_1 = "apricot" +: fruits_1
  println(s"10) fruits_1 = $fruits_1")

  // Concatenate Vectors
  var fruits_2:Vector[String] = Vector("fig", "grape")
  fruits_2 = fruits_1 ++ fruits_2
  println(s"11) fruits_2 = $fruits_2")

  // Access elements
  println(s"12) fruits_1(0) = ${fruits_1(0)}")
  println(s"13) fruits_1.last = ${fruits_1.last}")

  // Slice
  fruits_2 = fruits_1.slice(1, 3)
  println(s"14) fruits_1.slice(1, 3) $fruits_2")

  // Take and Drop
  println(s"15) fruits_1.take(2) = ${fruits_1.take(2)}")
  println(s"16) fruits_1.drop(2) = ${fruits_1.drop(2)}")

  // Map transformation
  fruits_2 = fruits_1.map(_.toUpperCase)
  println(s"17) fruits_2 =  = $fruits_2")

  // Filter
  fruits_2 = fruits_1.filter(_.length > 5)
  println(s"18) fruits_2 = $fruits_2")

  // foldLeft and foldRight
  // At this point in the code...
  // fruits_1 = Vector(apricot, apple, banana, cherry, date, elderberry)
  // NOTE: The fold and foldLeft methods generate identical results, but
  //       the order in which fold operations are performed on elements
  //       is unspecified and may be nondeterministic.
  // fold prints the first char of each fruit, from left to right (aabcde)
  // foldLeft prints the first char of each fruit, from left to right (aabcde)
  // foldRight prints the first char of each fruit, from right to left (edcbaa)
  var fruitString:String = fruits_1.fold("")((acc, fruit) => acc + fruit.charAt(0))
  println(s"19) fruitString = $fruitString")
  fruitString = fruits_1.foldLeft("")((acc, fruit) => acc + fruit.charAt(0))
  println(s"20) fruitString = $fruitString")
  fruitString = fruits_1.foldRight("")((fruit, acc) => acc + fruit.charAt(0))
  println(s"21) fruitString = $fruitString")

  // Reduce
  fruitString = fruits_1.reduce((a, b) => if (a.length > b.length) a else b)
  println(s"22) fruitString = $fruitString")

  // Collect
  var fruits_3:Vector[Int] = fruits_1.collect { case f if f.length % 2 == 0 => f.length }
  println(s"23) fruits_3 = $fruits_3")

  // GroupBy
  var fruits_4:Map[Int, Vector[String]] = fruits_1.groupBy(_.length)
  println(s"24) fruits_4 = $fruits_4")

  // Zip
  var fruits_5:Vector[(String, Int)] = fruits_1.zip(Vector(1, 2, 3, 4))
  println(s"25) fruits_5 = $fruits_5")

  // Distinct
  fruits_2 = Vector("apple", "banana", "apple", "cherry", "banana")
  println(s"26) fruits_2 = ${fruits_2.distinct}")

  // Reverse
  println(s"27) fruits_1.reverse ${fruits_1.reverse}")

  // Contains
  println(s"28) fruits_1.contains(banana) = ${fruits_1.contains("banana")}")

  // IndexOf
  println(s"29) fruits_1.indexOf(cherry) = ${fruits_1.indexOf("cherry")}")

  // Head and Tail
  println(s"30) fruits_1.head = ${fruits_1.head},  fruits_1.tail = ${fruits_1.tail}")

  // IsEmpty
  println(s"31) fruits_1.isEmpty = ${fruits_1.isEmpty}")

  // Size
  println(s"32) fruits_1.size = ${fruits_1.size}")
end main
